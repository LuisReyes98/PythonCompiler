Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    as
    assert
    at
    class
    continue
    del
    except
    finally
    from
    global
    import
    is
    lambda
    left_brace
    nonlocal
    pass
    period
    raise
    right_brace
    semicolon
    try
    with
    yield

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement -> block_statement
Rule 3     block_statement -> header newline inner_statement_list backspace
Rule 4     block_statement -> header newline inner_statement_list
Rule 5     block_statement -> empty
Rule 6     header -> defined_function
Rule 7     header -> conditional_statement
Rule 8     header -> repetitive_statement
Rule 9     defined_function -> def identifier left_parenthesis parameter right_parenthesis colon
Rule 10    parameter -> identifier
Rule 11    parameter -> parameter comma identifier
Rule 12    parameter -> empty
Rule 13    conditional_statement -> if boolean_expression colon
Rule 14    conditional_statement -> if boolean colon
Rule 15    conditional_statement -> elif boolean_expression colon
Rule 16    conditional_statement -> elif boolean colon
Rule 17    conditional_statement -> else colon
Rule 18    repetitive_statement -> for identifier in identifier colon
Rule 19    repetitive_statement -> while boolean_expression colon
Rule 20    repetitive_statement -> while boolean colon
Rule 21    inner_statement_list -> inner_statement newline
Rule 22    inner_statement_list -> inner_statement
Rule 23    inner_statement_list -> inner_statement_list inner_statement newline
Rule 24    inner_statement_list -> inner_statement_list inner_statement
Rule 25    inner_statement -> identation statement
Rule 26    inner_statement -> identation inner_statement
Rule 27    statement_list -> statement newline
Rule 28    statement_list -> statement
Rule 29    statement_list -> statement_list statement newline
Rule 30    statement_list -> statement_list statement
Rule 31    statement_list -> empty
Rule 32    statement -> assign_value
Rule 33    assign_value -> identifier assign_operator value
Rule 34    assign_operator -> assign
Rule 35    assign_operator -> update
Rule 36    update -> increment
Rule 37    update -> decrement
Rule 38    update -> self_product
Rule 39    update -> self_division
Rule 40    update -> self_integer_division
Rule 41    update -> self_module
Rule 42    update -> self_power
Rule 43    value -> number
Rule 44    number -> float
Rule 45    number -> integer
Rule 46    number -> identifier
Rule 47    value -> boolean
Rule 48    boolean -> True
Rule 49    boolean -> False
Rule 50    boolean -> identifier
Rule 51    value -> text
Rule 52    text -> string
Rule 53    text -> formatted_string
Rule 54    text -> identifier
Rule 55    formatted_string -> text module left_parenthesis element right_parenthesis
Rule 56    value -> expression
Rule 57    expression -> arithmetic_expression
Rule 58    arithmetic_expression -> number arithmetic_operator number
Rule 59    arithmetic_expression -> arithmetic_expression arithmetic_operator number
Rule 60    arithmetic_operator -> plus
Rule 61    arithmetic_operator -> minus
Rule 62    arithmetic_operator -> product
Rule 63    arithmetic_operator -> division
Rule 64    arithmetic_operator -> integer_division
Rule 65    arithmetic_operator -> module
Rule 66    arithmetic_operator -> power
Rule 67    expression -> boolean_expression
Rule 68    boolean_expression -> number relational_operator number
Rule 69    boolean_expression -> arithmetic_expression relational_operator number
Rule 70    boolean_expression -> number relational_operator arithmetic_expression
Rule 71    boolean_expression -> arithmetic_expression relational_operator arithmetic_expression
Rule 72    boolean_expression -> boolean boolean_operator boolean
Rule 73    boolean_expression -> not boolean
Rule 74    boolean_expression -> not boolean_expression
Rule 75    boolean_expression -> boolean_expression boolean_operator boolean
Rule 76    boolean_expression -> boolean_expression relational_operator number
Rule 77    boolean_expression -> boolean_expression relational_operator arithmetic_expression
Rule 78    relational_operator -> equals
Rule 79    relational_operator -> non_equal
Rule 80    relational_operator -> less
Rule 81    relational_operator -> greater
Rule 82    relational_operator -> less_equal
Rule 83    relational_operator -> greater_equal
Rule 84    boolean_operator -> and
Rule 85    boolean_operator -> or
Rule 86    expression -> string_concatenation
Rule 87    string_concatenation -> text plus text
Rule 88    string_concatenation -> string_concatenation plus text
Rule 89    value -> list
Rule 90    value -> function_call
Rule 91    value -> None
Rule 92    list -> left_bracket element right_bracket
Rule 93    element -> value
Rule 94    element -> element comma value
Rule 95    statement -> function_call
Rule 96    function_call -> identifier left_parenthesis argument right_parenthesis
Rule 97    argument -> value
Rule 98    argument -> argument comma value
Rule 99    argument -> empty
Rule 100   statement -> return value
Rule 101   statement -> break
Rule 102   empty -> <empty>

Terminals, with rules where they appear

False                : 49
None                 : 91
True                 : 48
and                  : 84
as                   : 
assert               : 
assign               : 34
at                   : 
backspace            : 3
break                : 101
class                : 
colon                : 9 13 14 15 16 17 18 19 20
comma                : 11 94 98
continue             : 
decrement            : 37
def                  : 9
del                  : 
division             : 63
elif                 : 15 16
else                 : 17
equals               : 78
error                : 
except               : 
finally              : 
float                : 44
for                  : 18
from                 : 
global               : 
greater              : 81
greater_equal        : 83
identation           : 25 26
identifier           : 9 10 11 18 18 33 46 50 54 96
if                   : 13 14
import               : 
in                   : 18
increment            : 36
integer              : 45
integer_division     : 64
is                   : 
lambda               : 
left_brace           : 
left_bracket         : 92
left_parenthesis     : 9 55 96
less                 : 80
less_equal           : 82
minus                : 61
module               : 55 65
newline              : 3 4 21 23 27 29
non_equal            : 79
nonlocal             : 
not                  : 73 74
or                   : 85
pass                 : 
period               : 
plus                 : 60 87 88
power                : 66
product              : 62
raise                : 
return               : 100
right_brace          : 
right_bracket        : 92
right_parenthesis    : 9 55 96
self_division        : 39
self_integer_division : 40
self_module          : 41
self_power           : 42
self_product         : 38
semicolon            : 
string               : 52
try                  : 
while                : 19 20
with                 : 
yield                : 

Nonterminals, with rules where they appear

argument             : 96 98
arithmetic_expression : 57 59 69 70 71 71 77
arithmetic_operator  : 58 59
assign_operator      : 33
assign_value         : 32
block_statement      : 2
boolean              : 14 16 20 47 72 72 73 75
boolean_expression   : 13 15 19 67 74 75 76 77
boolean_operator     : 72 75
conditional_statement : 7
defined_function     : 6
element              : 55 92 94
empty                : 5 12 31 99
expression           : 56
formatted_string     : 53
function_call        : 90 95
header               : 3 4
inner_statement      : 21 22 23 24 26
inner_statement_list : 3 4 23 24
list                 : 89
number               : 43 58 58 59 68 68 69 70 76
parameter            : 9 11
program              : 0
relational_operator  : 68 69 70 71 76 77
repetitive_statement : 8
statement            : 25 27 28 29 30
statement_list       : 1 29 30
string_concatenation : 86 88
text                 : 51 55 87 87 88
update               : 35
value                : 33 93 94 97 98 100

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (27) statement_list -> . statement newline
    (28) statement_list -> . statement
    (29) statement_list -> . statement_list statement newline
    (30) statement_list -> . statement_list statement
    (31) statement_list -> . empty
    (2) statement -> . block_statement
    (32) statement -> . assign_value
    (95) statement -> . function_call
    (100) statement -> . return value
    (101) statement -> . break
    (102) empty -> .
    (3) block_statement -> . header newline inner_statement_list backspace
    (4) block_statement -> . header newline inner_statement_list
    (5) block_statement -> . empty
    (33) assign_value -> . identifier assign_operator value
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (6) header -> . defined_function
    (7) header -> . conditional_statement
    (8) header -> . repetitive_statement
    (9) defined_function -> . def identifier left_parenthesis parameter right_parenthesis colon
    (13) conditional_statement -> . if boolean_expression colon
    (14) conditional_statement -> . if boolean colon
    (15) conditional_statement -> . elif boolean_expression colon
    (16) conditional_statement -> . elif boolean colon
    (17) conditional_statement -> . else colon
    (18) repetitive_statement -> . for identifier in identifier colon
    (19) repetitive_statement -> . while boolean_expression colon
    (20) repetitive_statement -> . while boolean colon

  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for break resolved as shift
  ! shift/reduce conflict for identifier resolved as shift
  ! shift/reduce conflict for def resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for elif resolved as shift
  ! shift/reduce conflict for else resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for while resolved as shift
    return          shift and go to state 8
    break           shift and go to state 9
    newline         reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    identifier      shift and go to state 11
    def             shift and go to state 15
    if              shift and go to state 16
    elif            shift and go to state 17
    else            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

  ! return          [ reduce using rule 102 (empty -> .) ]
  ! break           [ reduce using rule 102 (empty -> .) ]
  ! identifier      [ reduce using rule 102 (empty -> .) ]
  ! def             [ reduce using rule 102 (empty -> .) ]
  ! if              [ reduce using rule 102 (empty -> .) ]
  ! elif            [ reduce using rule 102 (empty -> .) ]
  ! else            [ reduce using rule 102 (empty -> .) ]
  ! for             [ reduce using rule 102 (empty -> .) ]
  ! while           [ reduce using rule 102 (empty -> .) ]

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    block_statement                shift and go to state 5
    assign_value                   shift and go to state 6
    function_call                  shift and go to state 7
    header                         shift and go to state 10
    defined_function               shift and go to state 12
    conditional_statement          shift and go to state 13
    repetitive_statement           shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (29) statement_list -> statement_list . statement newline
    (30) statement_list -> statement_list . statement
    (2) statement -> . block_statement
    (32) statement -> . assign_value
    (95) statement -> . function_call
    (100) statement -> . return value
    (101) statement -> . break
    (3) block_statement -> . header newline inner_statement_list backspace
    (4) block_statement -> . header newline inner_statement_list
    (5) block_statement -> . empty
    (33) assign_value -> . identifier assign_operator value
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (6) header -> . defined_function
    (7) header -> . conditional_statement
    (8) header -> . repetitive_statement
    (102) empty -> .
    (9) defined_function -> . def identifier left_parenthesis parameter right_parenthesis colon
    (13) conditional_statement -> . if boolean_expression colon
    (14) conditional_statement -> . if boolean colon
    (15) conditional_statement -> . elif boolean_expression colon
    (16) conditional_statement -> . elif boolean colon
    (17) conditional_statement -> . else colon
    (18) repetitive_statement -> . for identifier in identifier colon
    (19) repetitive_statement -> . while boolean_expression colon
    (20) repetitive_statement -> . while boolean colon

  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for break resolved as shift
  ! shift/reduce conflict for identifier resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statement_list .)
  ! shift/reduce conflict for def resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for elif resolved as shift
  ! shift/reduce conflict for else resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for while resolved as shift
    $end            reduce using rule 1 (program -> statement_list .)
    return          shift and go to state 8
    break           shift and go to state 9
    identifier      shift and go to state 11
    newline         reduce using rule 102 (empty -> .)
    def             shift and go to state 15
    if              shift and go to state 16
    elif            shift and go to state 17
    else            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

  ! return          [ reduce using rule 102 (empty -> .) ]
  ! break           [ reduce using rule 102 (empty -> .) ]
  ! identifier      [ reduce using rule 102 (empty -> .) ]
  ! def             [ reduce using rule 102 (empty -> .) ]
  ! if              [ reduce using rule 102 (empty -> .) ]
  ! elif            [ reduce using rule 102 (empty -> .) ]
  ! else            [ reduce using rule 102 (empty -> .) ]
  ! for             [ reduce using rule 102 (empty -> .) ]
  ! while           [ reduce using rule 102 (empty -> .) ]
  ! $end            [ reduce using rule 102 (empty -> .) ]

    statement                      shift and go to state 21
    block_statement                shift and go to state 5
    assign_value                   shift and go to state 6
    function_call                  shift and go to state 7
    header                         shift and go to state 10
    empty                          shift and go to state 22
    defined_function               shift and go to state 12
    conditional_statement          shift and go to state 13
    repetitive_statement           shift and go to state 14

state 3

    (27) statement_list -> statement . newline
    (28) statement_list -> statement .

  ! shift/reduce conflict for newline resolved as shift
    newline         shift and go to state 23
    return          reduce using rule 28 (statement_list -> statement .)
    break           reduce using rule 28 (statement_list -> statement .)
    identifier      reduce using rule 28 (statement_list -> statement .)
    def             reduce using rule 28 (statement_list -> statement .)
    if              reduce using rule 28 (statement_list -> statement .)
    elif            reduce using rule 28 (statement_list -> statement .)
    else            reduce using rule 28 (statement_list -> statement .)
    for             reduce using rule 28 (statement_list -> statement .)
    while           reduce using rule 28 (statement_list -> statement .)
    $end            reduce using rule 28 (statement_list -> statement .)

  ! newline         [ reduce using rule 28 (statement_list -> statement .) ]


state 4

    (31) statement_list -> empty .
    (5) block_statement -> empty .

  ! reduce/reduce conflict for newline resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for return resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for break resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for identifier resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for def resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for if resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for elif resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for else resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for for resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for while resolved using rule 5 (block_statement -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 5 (block_statement -> empty .)
    newline         reduce using rule 5 (block_statement -> empty .)
    return          reduce using rule 5 (block_statement -> empty .)
    break           reduce using rule 5 (block_statement -> empty .)
    identifier      reduce using rule 5 (block_statement -> empty .)
    def             reduce using rule 5 (block_statement -> empty .)
    if              reduce using rule 5 (block_statement -> empty .)
    elif            reduce using rule 5 (block_statement -> empty .)
    else            reduce using rule 5 (block_statement -> empty .)
    for             reduce using rule 5 (block_statement -> empty .)
    while           reduce using rule 5 (block_statement -> empty .)
    $end            reduce using rule 5 (block_statement -> empty .)

  ! return          [ reduce using rule 31 (statement_list -> empty .) ]
  ! break           [ reduce using rule 31 (statement_list -> empty .) ]
  ! identifier      [ reduce using rule 31 (statement_list -> empty .) ]
  ! def             [ reduce using rule 31 (statement_list -> empty .) ]
  ! if              [ reduce using rule 31 (statement_list -> empty .) ]
  ! elif            [ reduce using rule 31 (statement_list -> empty .) ]
  ! else            [ reduce using rule 31 (statement_list -> empty .) ]
  ! for             [ reduce using rule 31 (statement_list -> empty .) ]
  ! while           [ reduce using rule 31 (statement_list -> empty .) ]
  ! newline         [ reduce using rule 31 (statement_list -> empty .) ]
  ! $end            [ reduce using rule 31 (statement_list -> empty .) ]


state 5

    (2) statement -> block_statement .

    newline         reduce using rule 2 (statement -> block_statement .)
    return          reduce using rule 2 (statement -> block_statement .)
    break           reduce using rule 2 (statement -> block_statement .)
    identifier      reduce using rule 2 (statement -> block_statement .)
    def             reduce using rule 2 (statement -> block_statement .)
    if              reduce using rule 2 (statement -> block_statement .)
    elif            reduce using rule 2 (statement -> block_statement .)
    else            reduce using rule 2 (statement -> block_statement .)
    for             reduce using rule 2 (statement -> block_statement .)
    while           reduce using rule 2 (statement -> block_statement .)
    $end            reduce using rule 2 (statement -> block_statement .)
    backspace       reduce using rule 2 (statement -> block_statement .)
    identation      reduce using rule 2 (statement -> block_statement .)


state 6

    (32) statement -> assign_value .

    newline         reduce using rule 32 (statement -> assign_value .)
    return          reduce using rule 32 (statement -> assign_value .)
    break           reduce using rule 32 (statement -> assign_value .)
    identifier      reduce using rule 32 (statement -> assign_value .)
    def             reduce using rule 32 (statement -> assign_value .)
    if              reduce using rule 32 (statement -> assign_value .)
    elif            reduce using rule 32 (statement -> assign_value .)
    else            reduce using rule 32 (statement -> assign_value .)
    for             reduce using rule 32 (statement -> assign_value .)
    while           reduce using rule 32 (statement -> assign_value .)
    $end            reduce using rule 32 (statement -> assign_value .)
    backspace       reduce using rule 32 (statement -> assign_value .)
    identation      reduce using rule 32 (statement -> assign_value .)


state 7

    (95) statement -> function_call .

    newline         reduce using rule 95 (statement -> function_call .)
    return          reduce using rule 95 (statement -> function_call .)
    break           reduce using rule 95 (statement -> function_call .)
    identifier      reduce using rule 95 (statement -> function_call .)
    def             reduce using rule 95 (statement -> function_call .)
    if              reduce using rule 95 (statement -> function_call .)
    elif            reduce using rule 95 (statement -> function_call .)
    else            reduce using rule 95 (statement -> function_call .)
    for             reduce using rule 95 (statement -> function_call .)
    while           reduce using rule 95 (statement -> function_call .)
    $end            reduce using rule 95 (statement -> function_call .)
    backspace       reduce using rule 95 (statement -> function_call .)
    identation      reduce using rule 95 (statement -> function_call .)


state 8

    (100) statement -> return . value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    value                          shift and go to state 24
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 9

    (101) statement -> break .

    newline         reduce using rule 101 (statement -> break .)
    return          reduce using rule 101 (statement -> break .)
    break           reduce using rule 101 (statement -> break .)
    identifier      reduce using rule 101 (statement -> break .)
    def             reduce using rule 101 (statement -> break .)
    if              reduce using rule 101 (statement -> break .)
    elif            reduce using rule 101 (statement -> break .)
    else            reduce using rule 101 (statement -> break .)
    for             reduce using rule 101 (statement -> break .)
    while           reduce using rule 101 (statement -> break .)
    $end            reduce using rule 101 (statement -> break .)
    backspace       reduce using rule 101 (statement -> break .)
    identation      reduce using rule 101 (statement -> break .)


state 10

    (3) block_statement -> header . newline inner_statement_list backspace
    (4) block_statement -> header . newline inner_statement_list

    newline         shift and go to state 44


state 11

    (33) assign_value -> identifier . assign_operator value
    (96) function_call -> identifier . left_parenthesis argument right_parenthesis
    (34) assign_operator -> . assign
    (35) assign_operator -> . update
    (36) update -> . increment
    (37) update -> . decrement
    (38) update -> . self_product
    (39) update -> . self_division
    (40) update -> . self_integer_division
    (41) update -> . self_module
    (42) update -> . self_power

    left_parenthesis shift and go to state 46
    assign          shift and go to state 47
    increment       shift and go to state 49
    decrement       shift and go to state 50
    self_product    shift and go to state 51
    self_division   shift and go to state 52
    self_integer_division shift and go to state 53
    self_module     shift and go to state 54
    self_power      shift and go to state 55

    assign_operator                shift and go to state 45
    update                         shift and go to state 48

state 12

    (6) header -> defined_function .

    newline         reduce using rule 6 (header -> defined_function .)


state 13

    (7) header -> conditional_statement .

    newline         reduce using rule 7 (header -> conditional_statement .)


state 14

    (8) header -> repetitive_statement .

    newline         reduce using rule 8 (header -> repetitive_statement .)


state 15

    (9) defined_function -> def . identifier left_parenthesis parameter right_parenthesis colon

    identifier      shift and go to state 56


state 16

    (13) conditional_statement -> if . boolean_expression colon
    (14) conditional_statement -> if . boolean colon
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    not             shift and go to state 43
    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 61
    float           shift and go to state 32
    integer         shift and go to state 33

    boolean_expression             shift and go to state 57
    boolean                        shift and go to state 58
    number                         shift and go to state 59
    arithmetic_expression          shift and go to state 60

state 17

    (15) conditional_statement -> elif . boolean_expression colon
    (16) conditional_statement -> elif . boolean colon
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    not             shift and go to state 43
    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 61
    float           shift and go to state 32
    integer         shift and go to state 33

    boolean_expression             shift and go to state 62
    boolean                        shift and go to state 63
    number                         shift and go to state 59
    arithmetic_expression          shift and go to state 60

state 18

    (17) conditional_statement -> else . colon

    colon           shift and go to state 64


state 19

    (18) repetitive_statement -> for . identifier in identifier colon

    identifier      shift and go to state 65


state 20

    (19) repetitive_statement -> while . boolean_expression colon
    (20) repetitive_statement -> while . boolean colon
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    not             shift and go to state 43
    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 61
    float           shift and go to state 32
    integer         shift and go to state 33

    boolean_expression             shift and go to state 66
    boolean                        shift and go to state 67
    number                         shift and go to state 59
    arithmetic_expression          shift and go to state 60

state 21

    (29) statement_list -> statement_list statement . newline
    (30) statement_list -> statement_list statement .

  ! shift/reduce conflict for newline resolved as shift
    newline         shift and go to state 68
    return          reduce using rule 30 (statement_list -> statement_list statement .)
    break           reduce using rule 30 (statement_list -> statement_list statement .)
    identifier      reduce using rule 30 (statement_list -> statement_list statement .)
    def             reduce using rule 30 (statement_list -> statement_list statement .)
    if              reduce using rule 30 (statement_list -> statement_list statement .)
    elif            reduce using rule 30 (statement_list -> statement_list statement .)
    else            reduce using rule 30 (statement_list -> statement_list statement .)
    for             reduce using rule 30 (statement_list -> statement_list statement .)
    while           reduce using rule 30 (statement_list -> statement_list statement .)
    $end            reduce using rule 30 (statement_list -> statement_list statement .)

  ! newline         [ reduce using rule 30 (statement_list -> statement_list statement .) ]


state 22

    (5) block_statement -> empty .

    newline         reduce using rule 5 (block_statement -> empty .)
    return          reduce using rule 5 (block_statement -> empty .)
    break           reduce using rule 5 (block_statement -> empty .)
    identifier      reduce using rule 5 (block_statement -> empty .)
    def             reduce using rule 5 (block_statement -> empty .)
    if              reduce using rule 5 (block_statement -> empty .)
    elif            reduce using rule 5 (block_statement -> empty .)
    else            reduce using rule 5 (block_statement -> empty .)
    for             reduce using rule 5 (block_statement -> empty .)
    while           reduce using rule 5 (block_statement -> empty .)
    $end            reduce using rule 5 (block_statement -> empty .)
    backspace       reduce using rule 5 (block_statement -> empty .)
    identation      reduce using rule 5 (block_statement -> empty .)


state 23

    (27) statement_list -> statement newline .

    return          reduce using rule 27 (statement_list -> statement newline .)
    break           reduce using rule 27 (statement_list -> statement newline .)
    identifier      reduce using rule 27 (statement_list -> statement newline .)
    def             reduce using rule 27 (statement_list -> statement newline .)
    if              reduce using rule 27 (statement_list -> statement newline .)
    elif            reduce using rule 27 (statement_list -> statement newline .)
    else            reduce using rule 27 (statement_list -> statement newline .)
    for             reduce using rule 27 (statement_list -> statement newline .)
    while           reduce using rule 27 (statement_list -> statement newline .)
    newline         reduce using rule 27 (statement_list -> statement newline .)
    $end            reduce using rule 27 (statement_list -> statement newline .)


state 24

    (100) statement -> return value .

    newline         reduce using rule 100 (statement -> return value .)
    return          reduce using rule 100 (statement -> return value .)
    break           reduce using rule 100 (statement -> return value .)
    identifier      reduce using rule 100 (statement -> return value .)
    def             reduce using rule 100 (statement -> return value .)
    if              reduce using rule 100 (statement -> return value .)
    elif            reduce using rule 100 (statement -> return value .)
    else            reduce using rule 100 (statement -> return value .)
    for             reduce using rule 100 (statement -> return value .)
    while           reduce using rule 100 (statement -> return value .)
    $end            reduce using rule 100 (statement -> return value .)
    backspace       reduce using rule 100 (statement -> return value .)
    identation      reduce using rule 100 (statement -> return value .)


state 25

    (43) value -> number .
    (58) arithmetic_expression -> number . arithmetic_operator number
    (68) boolean_expression -> number . relational_operator number
    (70) boolean_expression -> number . relational_operator arithmetic_expression
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    newline         reduce using rule 43 (value -> number .)
    return          reduce using rule 43 (value -> number .)
    break           reduce using rule 43 (value -> number .)
    identifier      reduce using rule 43 (value -> number .)
    def             reduce using rule 43 (value -> number .)
    if              reduce using rule 43 (value -> number .)
    elif            reduce using rule 43 (value -> number .)
    else            reduce using rule 43 (value -> number .)
    for             reduce using rule 43 (value -> number .)
    while           reduce using rule 43 (value -> number .)
    $end            reduce using rule 43 (value -> number .)
    backspace       reduce using rule 43 (value -> number .)
    identation      reduce using rule 43 (value -> number .)
    right_bracket   reduce using rule 43 (value -> number .)
    comma           reduce using rule 43 (value -> number .)
    right_parenthesis reduce using rule 43 (value -> number .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    arithmetic_operator            shift and go to state 69
    relational_operator            shift and go to state 70

state 26

    (47) value -> boolean .
    (72) boolean_expression -> boolean . boolean_operator boolean
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or

    newline         reduce using rule 47 (value -> boolean .)
    return          reduce using rule 47 (value -> boolean .)
    break           reduce using rule 47 (value -> boolean .)
    identifier      reduce using rule 47 (value -> boolean .)
    def             reduce using rule 47 (value -> boolean .)
    if              reduce using rule 47 (value -> boolean .)
    elif            reduce using rule 47 (value -> boolean .)
    else            reduce using rule 47 (value -> boolean .)
    for             reduce using rule 47 (value -> boolean .)
    while           reduce using rule 47 (value -> boolean .)
    $end            reduce using rule 47 (value -> boolean .)
    backspace       reduce using rule 47 (value -> boolean .)
    identation      reduce using rule 47 (value -> boolean .)
    right_bracket   reduce using rule 47 (value -> boolean .)
    comma           reduce using rule 47 (value -> boolean .)
    right_parenthesis reduce using rule 47 (value -> boolean .)
    and             shift and go to state 85
    or              shift and go to state 86

    boolean_operator               shift and go to state 84

state 27

    (51) value -> text .
    (55) formatted_string -> text . module left_parenthesis element right_parenthesis
    (87) string_concatenation -> text . plus text

    newline         reduce using rule 51 (value -> text .)
    return          reduce using rule 51 (value -> text .)
    break           reduce using rule 51 (value -> text .)
    identifier      reduce using rule 51 (value -> text .)
    def             reduce using rule 51 (value -> text .)
    if              reduce using rule 51 (value -> text .)
    elif            reduce using rule 51 (value -> text .)
    else            reduce using rule 51 (value -> text .)
    for             reduce using rule 51 (value -> text .)
    while           reduce using rule 51 (value -> text .)
    $end            reduce using rule 51 (value -> text .)
    backspace       reduce using rule 51 (value -> text .)
    identation      reduce using rule 51 (value -> text .)
    right_bracket   reduce using rule 51 (value -> text .)
    comma           reduce using rule 51 (value -> text .)
    right_parenthesis reduce using rule 51 (value -> text .)
    module          shift and go to state 87
    plus            shift and go to state 88


state 28

    (56) value -> expression .

    newline         reduce using rule 56 (value -> expression .)
    return          reduce using rule 56 (value -> expression .)
    break           reduce using rule 56 (value -> expression .)
    identifier      reduce using rule 56 (value -> expression .)
    def             reduce using rule 56 (value -> expression .)
    if              reduce using rule 56 (value -> expression .)
    elif            reduce using rule 56 (value -> expression .)
    else            reduce using rule 56 (value -> expression .)
    for             reduce using rule 56 (value -> expression .)
    while           reduce using rule 56 (value -> expression .)
    $end            reduce using rule 56 (value -> expression .)
    backspace       reduce using rule 56 (value -> expression .)
    identation      reduce using rule 56 (value -> expression .)
    right_bracket   reduce using rule 56 (value -> expression .)
    comma           reduce using rule 56 (value -> expression .)
    right_parenthesis reduce using rule 56 (value -> expression .)


state 29

    (89) value -> list .

    newline         reduce using rule 89 (value -> list .)
    return          reduce using rule 89 (value -> list .)
    break           reduce using rule 89 (value -> list .)
    identifier      reduce using rule 89 (value -> list .)
    def             reduce using rule 89 (value -> list .)
    if              reduce using rule 89 (value -> list .)
    elif            reduce using rule 89 (value -> list .)
    else            reduce using rule 89 (value -> list .)
    for             reduce using rule 89 (value -> list .)
    while           reduce using rule 89 (value -> list .)
    $end            reduce using rule 89 (value -> list .)
    backspace       reduce using rule 89 (value -> list .)
    identation      reduce using rule 89 (value -> list .)
    right_bracket   reduce using rule 89 (value -> list .)
    comma           reduce using rule 89 (value -> list .)
    right_parenthesis reduce using rule 89 (value -> list .)


state 30

    (90) value -> function_call .

    newline         reduce using rule 90 (value -> function_call .)
    return          reduce using rule 90 (value -> function_call .)
    break           reduce using rule 90 (value -> function_call .)
    identifier      reduce using rule 90 (value -> function_call .)
    def             reduce using rule 90 (value -> function_call .)
    if              reduce using rule 90 (value -> function_call .)
    elif            reduce using rule 90 (value -> function_call .)
    else            reduce using rule 90 (value -> function_call .)
    for             reduce using rule 90 (value -> function_call .)
    while           reduce using rule 90 (value -> function_call .)
    $end            reduce using rule 90 (value -> function_call .)
    backspace       reduce using rule 90 (value -> function_call .)
    identation      reduce using rule 90 (value -> function_call .)
    right_bracket   reduce using rule 90 (value -> function_call .)
    comma           reduce using rule 90 (value -> function_call .)
    right_parenthesis reduce using rule 90 (value -> function_call .)


state 31

    (91) value -> None .

    newline         reduce using rule 91 (value -> None .)
    return          reduce using rule 91 (value -> None .)
    break           reduce using rule 91 (value -> None .)
    identifier      reduce using rule 91 (value -> None .)
    def             reduce using rule 91 (value -> None .)
    if              reduce using rule 91 (value -> None .)
    elif            reduce using rule 91 (value -> None .)
    else            reduce using rule 91 (value -> None .)
    for             reduce using rule 91 (value -> None .)
    while           reduce using rule 91 (value -> None .)
    $end            reduce using rule 91 (value -> None .)
    backspace       reduce using rule 91 (value -> None .)
    identation      reduce using rule 91 (value -> None .)
    right_bracket   reduce using rule 91 (value -> None .)
    comma           reduce using rule 91 (value -> None .)
    right_parenthesis reduce using rule 91 (value -> None .)


state 32

    (44) number -> float .

    plus            reduce using rule 44 (number -> float .)
    minus           reduce using rule 44 (number -> float .)
    product         reduce using rule 44 (number -> float .)
    division        reduce using rule 44 (number -> float .)
    integer_division reduce using rule 44 (number -> float .)
    module          reduce using rule 44 (number -> float .)
    power           reduce using rule 44 (number -> float .)
    equals          reduce using rule 44 (number -> float .)
    non_equal       reduce using rule 44 (number -> float .)
    less            reduce using rule 44 (number -> float .)
    greater         reduce using rule 44 (number -> float .)
    less_equal      reduce using rule 44 (number -> float .)
    greater_equal   reduce using rule 44 (number -> float .)
    newline         reduce using rule 44 (number -> float .)
    return          reduce using rule 44 (number -> float .)
    break           reduce using rule 44 (number -> float .)
    identifier      reduce using rule 44 (number -> float .)
    def             reduce using rule 44 (number -> float .)
    if              reduce using rule 44 (number -> float .)
    elif            reduce using rule 44 (number -> float .)
    else            reduce using rule 44 (number -> float .)
    for             reduce using rule 44 (number -> float .)
    while           reduce using rule 44 (number -> float .)
    $end            reduce using rule 44 (number -> float .)
    backspace       reduce using rule 44 (number -> float .)
    identation      reduce using rule 44 (number -> float .)
    right_bracket   reduce using rule 44 (number -> float .)
    comma           reduce using rule 44 (number -> float .)
    right_parenthesis reduce using rule 44 (number -> float .)
    and             reduce using rule 44 (number -> float .)
    or              reduce using rule 44 (number -> float .)
    colon           reduce using rule 44 (number -> float .)


state 33

    (45) number -> integer .

    plus            reduce using rule 45 (number -> integer .)
    minus           reduce using rule 45 (number -> integer .)
    product         reduce using rule 45 (number -> integer .)
    division        reduce using rule 45 (number -> integer .)
    integer_division reduce using rule 45 (number -> integer .)
    module          reduce using rule 45 (number -> integer .)
    power           reduce using rule 45 (number -> integer .)
    equals          reduce using rule 45 (number -> integer .)
    non_equal       reduce using rule 45 (number -> integer .)
    less            reduce using rule 45 (number -> integer .)
    greater         reduce using rule 45 (number -> integer .)
    less_equal      reduce using rule 45 (number -> integer .)
    greater_equal   reduce using rule 45 (number -> integer .)
    newline         reduce using rule 45 (number -> integer .)
    return          reduce using rule 45 (number -> integer .)
    break           reduce using rule 45 (number -> integer .)
    identifier      reduce using rule 45 (number -> integer .)
    def             reduce using rule 45 (number -> integer .)
    if              reduce using rule 45 (number -> integer .)
    elif            reduce using rule 45 (number -> integer .)
    else            reduce using rule 45 (number -> integer .)
    for             reduce using rule 45 (number -> integer .)
    while           reduce using rule 45 (number -> integer .)
    $end            reduce using rule 45 (number -> integer .)
    backspace       reduce using rule 45 (number -> integer .)
    identation      reduce using rule 45 (number -> integer .)
    right_bracket   reduce using rule 45 (number -> integer .)
    comma           reduce using rule 45 (number -> integer .)
    right_parenthesis reduce using rule 45 (number -> integer .)
    and             reduce using rule 45 (number -> integer .)
    or              reduce using rule 45 (number -> integer .)
    colon           reduce using rule 45 (number -> integer .)


state 34

    (46) number -> identifier .
    (50) boolean -> identifier .
    (54) text -> identifier .
    (96) function_call -> identifier . left_parenthesis argument right_parenthesis

  ! reduce/reduce conflict for newline resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for return resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for break resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for identifier resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for def resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for if resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for elif resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for else resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for for resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for while resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for backspace resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for identation resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for right_bracket resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for comma resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for right_parenthesis resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for module resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for plus resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for newline resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for return resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for break resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for identifier resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for def resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for if resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for elif resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for else resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for for resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for while resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for backspace resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for identation resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for right_bracket resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for comma resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for right_parenthesis resolved using rule 46 (number -> identifier .)
    plus            reduce using rule 46 (number -> identifier .)
    minus           reduce using rule 46 (number -> identifier .)
    product         reduce using rule 46 (number -> identifier .)
    division        reduce using rule 46 (number -> identifier .)
    integer_division reduce using rule 46 (number -> identifier .)
    module          reduce using rule 46 (number -> identifier .)
    power           reduce using rule 46 (number -> identifier .)
    equals          reduce using rule 46 (number -> identifier .)
    non_equal       reduce using rule 46 (number -> identifier .)
    less            reduce using rule 46 (number -> identifier .)
    greater         reduce using rule 46 (number -> identifier .)
    less_equal      reduce using rule 46 (number -> identifier .)
    greater_equal   reduce using rule 46 (number -> identifier .)
    newline         reduce using rule 46 (number -> identifier .)
    return          reduce using rule 46 (number -> identifier .)
    break           reduce using rule 46 (number -> identifier .)
    identifier      reduce using rule 46 (number -> identifier .)
    def             reduce using rule 46 (number -> identifier .)
    if              reduce using rule 46 (number -> identifier .)
    elif            reduce using rule 46 (number -> identifier .)
    else            reduce using rule 46 (number -> identifier .)
    for             reduce using rule 46 (number -> identifier .)
    while           reduce using rule 46 (number -> identifier .)
    $end            reduce using rule 46 (number -> identifier .)
    backspace       reduce using rule 46 (number -> identifier .)
    identation      reduce using rule 46 (number -> identifier .)
    right_bracket   reduce using rule 46 (number -> identifier .)
    comma           reduce using rule 46 (number -> identifier .)
    right_parenthesis reduce using rule 46 (number -> identifier .)
    and             reduce using rule 50 (boolean -> identifier .)
    or              reduce using rule 50 (boolean -> identifier .)
    left_parenthesis shift and go to state 46

  ! newline         [ reduce using rule 50 (boolean -> identifier .) ]
  ! return          [ reduce using rule 50 (boolean -> identifier .) ]
  ! break           [ reduce using rule 50 (boolean -> identifier .) ]
  ! identifier      [ reduce using rule 50 (boolean -> identifier .) ]
  ! def             [ reduce using rule 50 (boolean -> identifier .) ]
  ! if              [ reduce using rule 50 (boolean -> identifier .) ]
  ! elif            [ reduce using rule 50 (boolean -> identifier .) ]
  ! else            [ reduce using rule 50 (boolean -> identifier .) ]
  ! for             [ reduce using rule 50 (boolean -> identifier .) ]
  ! while           [ reduce using rule 50 (boolean -> identifier .) ]
  ! $end            [ reduce using rule 50 (boolean -> identifier .) ]
  ! backspace       [ reduce using rule 50 (boolean -> identifier .) ]
  ! identation      [ reduce using rule 50 (boolean -> identifier .) ]
  ! right_bracket   [ reduce using rule 50 (boolean -> identifier .) ]
  ! comma           [ reduce using rule 50 (boolean -> identifier .) ]
  ! right_parenthesis [ reduce using rule 50 (boolean -> identifier .) ]
  ! module          [ reduce using rule 54 (text -> identifier .) ]
  ! plus            [ reduce using rule 54 (text -> identifier .) ]
  ! newline         [ reduce using rule 54 (text -> identifier .) ]
  ! return          [ reduce using rule 54 (text -> identifier .) ]
  ! break           [ reduce using rule 54 (text -> identifier .) ]
  ! identifier      [ reduce using rule 54 (text -> identifier .) ]
  ! def             [ reduce using rule 54 (text -> identifier .) ]
  ! if              [ reduce using rule 54 (text -> identifier .) ]
  ! elif            [ reduce using rule 54 (text -> identifier .) ]
  ! else            [ reduce using rule 54 (text -> identifier .) ]
  ! for             [ reduce using rule 54 (text -> identifier .) ]
  ! while           [ reduce using rule 54 (text -> identifier .) ]
  ! $end            [ reduce using rule 54 (text -> identifier .) ]
  ! backspace       [ reduce using rule 54 (text -> identifier .) ]
  ! identation      [ reduce using rule 54 (text -> identifier .) ]
  ! right_bracket   [ reduce using rule 54 (text -> identifier .) ]
  ! comma           [ reduce using rule 54 (text -> identifier .) ]
  ! right_parenthesis [ reduce using rule 54 (text -> identifier .) ]


state 35

    (48) boolean -> True .

    and             reduce using rule 48 (boolean -> True .)
    or              reduce using rule 48 (boolean -> True .)
    newline         reduce using rule 48 (boolean -> True .)
    return          reduce using rule 48 (boolean -> True .)
    break           reduce using rule 48 (boolean -> True .)
    identifier      reduce using rule 48 (boolean -> True .)
    def             reduce using rule 48 (boolean -> True .)
    if              reduce using rule 48 (boolean -> True .)
    elif            reduce using rule 48 (boolean -> True .)
    else            reduce using rule 48 (boolean -> True .)
    for             reduce using rule 48 (boolean -> True .)
    while           reduce using rule 48 (boolean -> True .)
    $end            reduce using rule 48 (boolean -> True .)
    backspace       reduce using rule 48 (boolean -> True .)
    identation      reduce using rule 48 (boolean -> True .)
    colon           reduce using rule 48 (boolean -> True .)
    right_bracket   reduce using rule 48 (boolean -> True .)
    comma           reduce using rule 48 (boolean -> True .)
    equals          reduce using rule 48 (boolean -> True .)
    non_equal       reduce using rule 48 (boolean -> True .)
    less            reduce using rule 48 (boolean -> True .)
    greater         reduce using rule 48 (boolean -> True .)
    less_equal      reduce using rule 48 (boolean -> True .)
    greater_equal   reduce using rule 48 (boolean -> True .)
    right_parenthesis reduce using rule 48 (boolean -> True .)


state 36

    (49) boolean -> False .

    and             reduce using rule 49 (boolean -> False .)
    or              reduce using rule 49 (boolean -> False .)
    newline         reduce using rule 49 (boolean -> False .)
    return          reduce using rule 49 (boolean -> False .)
    break           reduce using rule 49 (boolean -> False .)
    identifier      reduce using rule 49 (boolean -> False .)
    def             reduce using rule 49 (boolean -> False .)
    if              reduce using rule 49 (boolean -> False .)
    elif            reduce using rule 49 (boolean -> False .)
    else            reduce using rule 49 (boolean -> False .)
    for             reduce using rule 49 (boolean -> False .)
    while           reduce using rule 49 (boolean -> False .)
    $end            reduce using rule 49 (boolean -> False .)
    backspace       reduce using rule 49 (boolean -> False .)
    identation      reduce using rule 49 (boolean -> False .)
    colon           reduce using rule 49 (boolean -> False .)
    right_bracket   reduce using rule 49 (boolean -> False .)
    comma           reduce using rule 49 (boolean -> False .)
    equals          reduce using rule 49 (boolean -> False .)
    non_equal       reduce using rule 49 (boolean -> False .)
    less            reduce using rule 49 (boolean -> False .)
    greater         reduce using rule 49 (boolean -> False .)
    less_equal      reduce using rule 49 (boolean -> False .)
    greater_equal   reduce using rule 49 (boolean -> False .)
    right_parenthesis reduce using rule 49 (boolean -> False .)


state 37

    (52) text -> string .

    module          reduce using rule 52 (text -> string .)
    plus            reduce using rule 52 (text -> string .)
    newline         reduce using rule 52 (text -> string .)
    return          reduce using rule 52 (text -> string .)
    break           reduce using rule 52 (text -> string .)
    identifier      reduce using rule 52 (text -> string .)
    def             reduce using rule 52 (text -> string .)
    if              reduce using rule 52 (text -> string .)
    elif            reduce using rule 52 (text -> string .)
    else            reduce using rule 52 (text -> string .)
    for             reduce using rule 52 (text -> string .)
    while           reduce using rule 52 (text -> string .)
    $end            reduce using rule 52 (text -> string .)
    backspace       reduce using rule 52 (text -> string .)
    identation      reduce using rule 52 (text -> string .)
    right_bracket   reduce using rule 52 (text -> string .)
    comma           reduce using rule 52 (text -> string .)
    right_parenthesis reduce using rule 52 (text -> string .)


state 38

    (53) text -> formatted_string .

    module          reduce using rule 53 (text -> formatted_string .)
    plus            reduce using rule 53 (text -> formatted_string .)
    newline         reduce using rule 53 (text -> formatted_string .)
    return          reduce using rule 53 (text -> formatted_string .)
    break           reduce using rule 53 (text -> formatted_string .)
    identifier      reduce using rule 53 (text -> formatted_string .)
    def             reduce using rule 53 (text -> formatted_string .)
    if              reduce using rule 53 (text -> formatted_string .)
    elif            reduce using rule 53 (text -> formatted_string .)
    else            reduce using rule 53 (text -> formatted_string .)
    for             reduce using rule 53 (text -> formatted_string .)
    while           reduce using rule 53 (text -> formatted_string .)
    $end            reduce using rule 53 (text -> formatted_string .)
    backspace       reduce using rule 53 (text -> formatted_string .)
    identation      reduce using rule 53 (text -> formatted_string .)
    right_bracket   reduce using rule 53 (text -> formatted_string .)
    comma           reduce using rule 53 (text -> formatted_string .)
    right_parenthesis reduce using rule 53 (text -> formatted_string .)


state 39

    (57) expression -> arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . arithmetic_operator number
    (69) boolean_expression -> arithmetic_expression . relational_operator number
    (71) boolean_expression -> arithmetic_expression . relational_operator arithmetic_expression
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    newline         reduce using rule 57 (expression -> arithmetic_expression .)
    return          reduce using rule 57 (expression -> arithmetic_expression .)
    break           reduce using rule 57 (expression -> arithmetic_expression .)
    identifier      reduce using rule 57 (expression -> arithmetic_expression .)
    def             reduce using rule 57 (expression -> arithmetic_expression .)
    if              reduce using rule 57 (expression -> arithmetic_expression .)
    elif            reduce using rule 57 (expression -> arithmetic_expression .)
    else            reduce using rule 57 (expression -> arithmetic_expression .)
    for             reduce using rule 57 (expression -> arithmetic_expression .)
    while           reduce using rule 57 (expression -> arithmetic_expression .)
    $end            reduce using rule 57 (expression -> arithmetic_expression .)
    backspace       reduce using rule 57 (expression -> arithmetic_expression .)
    identation      reduce using rule 57 (expression -> arithmetic_expression .)
    right_bracket   reduce using rule 57 (expression -> arithmetic_expression .)
    comma           reduce using rule 57 (expression -> arithmetic_expression .)
    right_parenthesis reduce using rule 57 (expression -> arithmetic_expression .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    arithmetic_operator            shift and go to state 89
    relational_operator            shift and go to state 90

state 40

    (67) expression -> boolean_expression .
    (75) boolean_expression -> boolean_expression . boolean_operator boolean
    (76) boolean_expression -> boolean_expression . relational_operator number
    (77) boolean_expression -> boolean_expression . relational_operator arithmetic_expression
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    newline         reduce using rule 67 (expression -> boolean_expression .)
    return          reduce using rule 67 (expression -> boolean_expression .)
    break           reduce using rule 67 (expression -> boolean_expression .)
    identifier      reduce using rule 67 (expression -> boolean_expression .)
    def             reduce using rule 67 (expression -> boolean_expression .)
    if              reduce using rule 67 (expression -> boolean_expression .)
    elif            reduce using rule 67 (expression -> boolean_expression .)
    else            reduce using rule 67 (expression -> boolean_expression .)
    for             reduce using rule 67 (expression -> boolean_expression .)
    while           reduce using rule 67 (expression -> boolean_expression .)
    $end            reduce using rule 67 (expression -> boolean_expression .)
    backspace       reduce using rule 67 (expression -> boolean_expression .)
    identation      reduce using rule 67 (expression -> boolean_expression .)
    right_bracket   reduce using rule 67 (expression -> boolean_expression .)
    comma           reduce using rule 67 (expression -> boolean_expression .)
    right_parenthesis reduce using rule 67 (expression -> boolean_expression .)
    and             shift and go to state 85
    or              shift and go to state 86
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    boolean_operator               shift and go to state 91
    relational_operator            shift and go to state 92

state 41

    (86) expression -> string_concatenation .
    (88) string_concatenation -> string_concatenation . plus text

    newline         reduce using rule 86 (expression -> string_concatenation .)
    return          reduce using rule 86 (expression -> string_concatenation .)
    break           reduce using rule 86 (expression -> string_concatenation .)
    identifier      reduce using rule 86 (expression -> string_concatenation .)
    def             reduce using rule 86 (expression -> string_concatenation .)
    if              reduce using rule 86 (expression -> string_concatenation .)
    elif            reduce using rule 86 (expression -> string_concatenation .)
    else            reduce using rule 86 (expression -> string_concatenation .)
    for             reduce using rule 86 (expression -> string_concatenation .)
    while           reduce using rule 86 (expression -> string_concatenation .)
    $end            reduce using rule 86 (expression -> string_concatenation .)
    backspace       reduce using rule 86 (expression -> string_concatenation .)
    identation      reduce using rule 86 (expression -> string_concatenation .)
    right_bracket   reduce using rule 86 (expression -> string_concatenation .)
    comma           reduce using rule 86 (expression -> string_concatenation .)
    right_parenthesis reduce using rule 86 (expression -> string_concatenation .)
    plus            shift and go to state 93


state 42

    (92) list -> left_bracket . element right_bracket
    (93) element -> . value
    (94) element -> . element comma value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    element                        shift and go to state 94
    value                          shift and go to state 95
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 43

    (73) boolean_expression -> not . boolean
    (74) boolean_expression -> not . boolean_expression
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 61
    not             shift and go to state 43
    float           shift and go to state 32
    integer         shift and go to state 33

    boolean                        shift and go to state 96
    boolean_expression             shift and go to state 97
    number                         shift and go to state 59
    arithmetic_expression          shift and go to state 60

state 44

    (3) block_statement -> header newline . inner_statement_list backspace
    (4) block_statement -> header newline . inner_statement_list
    (21) inner_statement_list -> . inner_statement newline
    (22) inner_statement_list -> . inner_statement
    (23) inner_statement_list -> . inner_statement_list inner_statement newline
    (24) inner_statement_list -> . inner_statement_list inner_statement
    (25) inner_statement -> . identation statement
    (26) inner_statement -> . identation inner_statement

    identation      shift and go to state 100

    inner_statement_list           shift and go to state 98
    inner_statement                shift and go to state 99

state 45

    (33) assign_value -> identifier assign_operator . value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    value                          shift and go to state 101
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 46

    (96) function_call -> identifier left_parenthesis . argument right_parenthesis
    (97) argument -> . value
    (98) argument -> . argument comma value
    (99) argument -> . empty
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (102) empty -> .
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    right_parenthesis reduce using rule 102 (empty -> .)
    comma           reduce using rule 102 (empty -> .)
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    argument                       shift and go to state 102
    value                          shift and go to state 103
    empty                          shift and go to state 104
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 47

    (34) assign_operator -> assign .

    None            reduce using rule 34 (assign_operator -> assign .)
    float           reduce using rule 34 (assign_operator -> assign .)
    integer         reduce using rule 34 (assign_operator -> assign .)
    identifier      reduce using rule 34 (assign_operator -> assign .)
    True            reduce using rule 34 (assign_operator -> assign .)
    False           reduce using rule 34 (assign_operator -> assign .)
    string          reduce using rule 34 (assign_operator -> assign .)
    left_bracket    reduce using rule 34 (assign_operator -> assign .)
    not             reduce using rule 34 (assign_operator -> assign .)


state 48

    (35) assign_operator -> update .

    None            reduce using rule 35 (assign_operator -> update .)
    float           reduce using rule 35 (assign_operator -> update .)
    integer         reduce using rule 35 (assign_operator -> update .)
    identifier      reduce using rule 35 (assign_operator -> update .)
    True            reduce using rule 35 (assign_operator -> update .)
    False           reduce using rule 35 (assign_operator -> update .)
    string          reduce using rule 35 (assign_operator -> update .)
    left_bracket    reduce using rule 35 (assign_operator -> update .)
    not             reduce using rule 35 (assign_operator -> update .)


state 49

    (36) update -> increment .

    None            reduce using rule 36 (update -> increment .)
    float           reduce using rule 36 (update -> increment .)
    integer         reduce using rule 36 (update -> increment .)
    identifier      reduce using rule 36 (update -> increment .)
    True            reduce using rule 36 (update -> increment .)
    False           reduce using rule 36 (update -> increment .)
    string          reduce using rule 36 (update -> increment .)
    left_bracket    reduce using rule 36 (update -> increment .)
    not             reduce using rule 36 (update -> increment .)


state 50

    (37) update -> decrement .

    None            reduce using rule 37 (update -> decrement .)
    float           reduce using rule 37 (update -> decrement .)
    integer         reduce using rule 37 (update -> decrement .)
    identifier      reduce using rule 37 (update -> decrement .)
    True            reduce using rule 37 (update -> decrement .)
    False           reduce using rule 37 (update -> decrement .)
    string          reduce using rule 37 (update -> decrement .)
    left_bracket    reduce using rule 37 (update -> decrement .)
    not             reduce using rule 37 (update -> decrement .)


state 51

    (38) update -> self_product .

    None            reduce using rule 38 (update -> self_product .)
    float           reduce using rule 38 (update -> self_product .)
    integer         reduce using rule 38 (update -> self_product .)
    identifier      reduce using rule 38 (update -> self_product .)
    True            reduce using rule 38 (update -> self_product .)
    False           reduce using rule 38 (update -> self_product .)
    string          reduce using rule 38 (update -> self_product .)
    left_bracket    reduce using rule 38 (update -> self_product .)
    not             reduce using rule 38 (update -> self_product .)


state 52

    (39) update -> self_division .

    None            reduce using rule 39 (update -> self_division .)
    float           reduce using rule 39 (update -> self_division .)
    integer         reduce using rule 39 (update -> self_division .)
    identifier      reduce using rule 39 (update -> self_division .)
    True            reduce using rule 39 (update -> self_division .)
    False           reduce using rule 39 (update -> self_division .)
    string          reduce using rule 39 (update -> self_division .)
    left_bracket    reduce using rule 39 (update -> self_division .)
    not             reduce using rule 39 (update -> self_division .)


state 53

    (40) update -> self_integer_division .

    None            reduce using rule 40 (update -> self_integer_division .)
    float           reduce using rule 40 (update -> self_integer_division .)
    integer         reduce using rule 40 (update -> self_integer_division .)
    identifier      reduce using rule 40 (update -> self_integer_division .)
    True            reduce using rule 40 (update -> self_integer_division .)
    False           reduce using rule 40 (update -> self_integer_division .)
    string          reduce using rule 40 (update -> self_integer_division .)
    left_bracket    reduce using rule 40 (update -> self_integer_division .)
    not             reduce using rule 40 (update -> self_integer_division .)


state 54

    (41) update -> self_module .

    None            reduce using rule 41 (update -> self_module .)
    float           reduce using rule 41 (update -> self_module .)
    integer         reduce using rule 41 (update -> self_module .)
    identifier      reduce using rule 41 (update -> self_module .)
    True            reduce using rule 41 (update -> self_module .)
    False           reduce using rule 41 (update -> self_module .)
    string          reduce using rule 41 (update -> self_module .)
    left_bracket    reduce using rule 41 (update -> self_module .)
    not             reduce using rule 41 (update -> self_module .)


state 55

    (42) update -> self_power .

    None            reduce using rule 42 (update -> self_power .)
    float           reduce using rule 42 (update -> self_power .)
    integer         reduce using rule 42 (update -> self_power .)
    identifier      reduce using rule 42 (update -> self_power .)
    True            reduce using rule 42 (update -> self_power .)
    False           reduce using rule 42 (update -> self_power .)
    string          reduce using rule 42 (update -> self_power .)
    left_bracket    reduce using rule 42 (update -> self_power .)
    not             reduce using rule 42 (update -> self_power .)


state 56

    (9) defined_function -> def identifier . left_parenthesis parameter right_parenthesis colon

    left_parenthesis shift and go to state 105


state 57

    (13) conditional_statement -> if boolean_expression . colon
    (75) boolean_expression -> boolean_expression . boolean_operator boolean
    (76) boolean_expression -> boolean_expression . relational_operator number
    (77) boolean_expression -> boolean_expression . relational_operator arithmetic_expression
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    colon           shift and go to state 106
    and             shift and go to state 85
    or              shift and go to state 86
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    boolean_operator               shift and go to state 91
    relational_operator            shift and go to state 92

state 58

    (14) conditional_statement -> if boolean . colon
    (72) boolean_expression -> boolean . boolean_operator boolean
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or

    colon           shift and go to state 107
    and             shift and go to state 85
    or              shift and go to state 86

    boolean_operator               shift and go to state 84

state 59

    (68) boolean_expression -> number . relational_operator number
    (70) boolean_expression -> number . relational_operator arithmetic_expression
    (58) arithmetic_expression -> number . arithmetic_operator number
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    relational_operator            shift and go to state 70
    arithmetic_operator            shift and go to state 69

state 60

    (69) boolean_expression -> arithmetic_expression . relational_operator number
    (71) boolean_expression -> arithmetic_expression . relational_operator arithmetic_expression
    (59) arithmetic_expression -> arithmetic_expression . arithmetic_operator number
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    relational_operator            shift and go to state 90
    arithmetic_operator            shift and go to state 89

state 61

    (50) boolean -> identifier .
    (46) number -> identifier .

  ! reduce/reduce conflict for equals resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for non_equal resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for less resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for greater resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for less_equal resolved using rule 46 (number -> identifier .)
  ! reduce/reduce conflict for greater_equal resolved using rule 46 (number -> identifier .)
    colon           reduce using rule 50 (boolean -> identifier .)
    and             reduce using rule 50 (boolean -> identifier .)
    or              reduce using rule 50 (boolean -> identifier .)
    newline         reduce using rule 50 (boolean -> identifier .)
    return          reduce using rule 50 (boolean -> identifier .)
    break           reduce using rule 50 (boolean -> identifier .)
    identifier      reduce using rule 50 (boolean -> identifier .)
    def             reduce using rule 50 (boolean -> identifier .)
    if              reduce using rule 50 (boolean -> identifier .)
    elif            reduce using rule 50 (boolean -> identifier .)
    else            reduce using rule 50 (boolean -> identifier .)
    for             reduce using rule 50 (boolean -> identifier .)
    while           reduce using rule 50 (boolean -> identifier .)
    $end            reduce using rule 50 (boolean -> identifier .)
    backspace       reduce using rule 50 (boolean -> identifier .)
    identation      reduce using rule 50 (boolean -> identifier .)
    right_bracket   reduce using rule 50 (boolean -> identifier .)
    comma           reduce using rule 50 (boolean -> identifier .)
    right_parenthesis reduce using rule 50 (boolean -> identifier .)
    equals          reduce using rule 46 (number -> identifier .)
    non_equal       reduce using rule 46 (number -> identifier .)
    less            reduce using rule 46 (number -> identifier .)
    greater         reduce using rule 46 (number -> identifier .)
    less_equal      reduce using rule 46 (number -> identifier .)
    greater_equal   reduce using rule 46 (number -> identifier .)
    plus            reduce using rule 46 (number -> identifier .)
    minus           reduce using rule 46 (number -> identifier .)
    product         reduce using rule 46 (number -> identifier .)
    division        reduce using rule 46 (number -> identifier .)
    integer_division reduce using rule 46 (number -> identifier .)
    module          reduce using rule 46 (number -> identifier .)
    power           reduce using rule 46 (number -> identifier .)

  ! equals          [ reduce using rule 50 (boolean -> identifier .) ]
  ! non_equal       [ reduce using rule 50 (boolean -> identifier .) ]
  ! less            [ reduce using rule 50 (boolean -> identifier .) ]
  ! greater         [ reduce using rule 50 (boolean -> identifier .) ]
  ! less_equal      [ reduce using rule 50 (boolean -> identifier .) ]
  ! greater_equal   [ reduce using rule 50 (boolean -> identifier .) ]


state 62

    (15) conditional_statement -> elif boolean_expression . colon
    (75) boolean_expression -> boolean_expression . boolean_operator boolean
    (76) boolean_expression -> boolean_expression . relational_operator number
    (77) boolean_expression -> boolean_expression . relational_operator arithmetic_expression
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    colon           shift and go to state 108
    and             shift and go to state 85
    or              shift and go to state 86
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    boolean_operator               shift and go to state 91
    relational_operator            shift and go to state 92

state 63

    (16) conditional_statement -> elif boolean . colon
    (72) boolean_expression -> boolean . boolean_operator boolean
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or

    colon           shift and go to state 109
    and             shift and go to state 85
    or              shift and go to state 86

    boolean_operator               shift and go to state 84

state 64

    (17) conditional_statement -> else colon .

    newline         reduce using rule 17 (conditional_statement -> else colon .)


state 65

    (18) repetitive_statement -> for identifier . in identifier colon

    in              shift and go to state 110


state 66

    (19) repetitive_statement -> while boolean_expression . colon
    (75) boolean_expression -> boolean_expression . boolean_operator boolean
    (76) boolean_expression -> boolean_expression . relational_operator number
    (77) boolean_expression -> boolean_expression . relational_operator arithmetic_expression
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    colon           shift and go to state 111
    and             shift and go to state 85
    or              shift and go to state 86
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

    boolean_operator               shift and go to state 91
    relational_operator            shift and go to state 92

state 67

    (20) repetitive_statement -> while boolean . colon
    (72) boolean_expression -> boolean . boolean_operator boolean
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or

    colon           shift and go to state 112
    and             shift and go to state 85
    or              shift and go to state 86

    boolean_operator               shift and go to state 84

state 68

    (29) statement_list -> statement_list statement newline .

    return          reduce using rule 29 (statement_list -> statement_list statement newline .)
    break           reduce using rule 29 (statement_list -> statement_list statement newline .)
    identifier      reduce using rule 29 (statement_list -> statement_list statement newline .)
    def             reduce using rule 29 (statement_list -> statement_list statement newline .)
    if              reduce using rule 29 (statement_list -> statement_list statement newline .)
    elif            reduce using rule 29 (statement_list -> statement_list statement newline .)
    else            reduce using rule 29 (statement_list -> statement_list statement newline .)
    for             reduce using rule 29 (statement_list -> statement_list statement newline .)
    while           reduce using rule 29 (statement_list -> statement_list statement newline .)
    newline         reduce using rule 29 (statement_list -> statement_list statement newline .)
    $end            reduce using rule 29 (statement_list -> statement_list statement newline .)


state 69

    (58) arithmetic_expression -> number arithmetic_operator . number
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier

    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 114

    number                         shift and go to state 113

state 70

    (68) boolean_expression -> number relational_operator . number
    (70) boolean_expression -> number relational_operator . arithmetic_expression
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 114

    number                         shift and go to state 115
    arithmetic_expression          shift and go to state 116

state 71

    (60) arithmetic_operator -> plus .

    float           reduce using rule 60 (arithmetic_operator -> plus .)
    integer         reduce using rule 60 (arithmetic_operator -> plus .)
    identifier      reduce using rule 60 (arithmetic_operator -> plus .)


state 72

    (61) arithmetic_operator -> minus .

    float           reduce using rule 61 (arithmetic_operator -> minus .)
    integer         reduce using rule 61 (arithmetic_operator -> minus .)
    identifier      reduce using rule 61 (arithmetic_operator -> minus .)


state 73

    (62) arithmetic_operator -> product .

    float           reduce using rule 62 (arithmetic_operator -> product .)
    integer         reduce using rule 62 (arithmetic_operator -> product .)
    identifier      reduce using rule 62 (arithmetic_operator -> product .)


state 74

    (63) arithmetic_operator -> division .

    float           reduce using rule 63 (arithmetic_operator -> division .)
    integer         reduce using rule 63 (arithmetic_operator -> division .)
    identifier      reduce using rule 63 (arithmetic_operator -> division .)


state 75

    (64) arithmetic_operator -> integer_division .

    float           reduce using rule 64 (arithmetic_operator -> integer_division .)
    integer         reduce using rule 64 (arithmetic_operator -> integer_division .)
    identifier      reduce using rule 64 (arithmetic_operator -> integer_division .)


state 76

    (65) arithmetic_operator -> module .

    float           reduce using rule 65 (arithmetic_operator -> module .)
    integer         reduce using rule 65 (arithmetic_operator -> module .)
    identifier      reduce using rule 65 (arithmetic_operator -> module .)


state 77

    (66) arithmetic_operator -> power .

    float           reduce using rule 66 (arithmetic_operator -> power .)
    integer         reduce using rule 66 (arithmetic_operator -> power .)
    identifier      reduce using rule 66 (arithmetic_operator -> power .)


state 78

    (78) relational_operator -> equals .

    float           reduce using rule 78 (relational_operator -> equals .)
    integer         reduce using rule 78 (relational_operator -> equals .)
    identifier      reduce using rule 78 (relational_operator -> equals .)


state 79

    (79) relational_operator -> non_equal .

    float           reduce using rule 79 (relational_operator -> non_equal .)
    integer         reduce using rule 79 (relational_operator -> non_equal .)
    identifier      reduce using rule 79 (relational_operator -> non_equal .)


state 80

    (80) relational_operator -> less .

    float           reduce using rule 80 (relational_operator -> less .)
    integer         reduce using rule 80 (relational_operator -> less .)
    identifier      reduce using rule 80 (relational_operator -> less .)


state 81

    (81) relational_operator -> greater .

    float           reduce using rule 81 (relational_operator -> greater .)
    integer         reduce using rule 81 (relational_operator -> greater .)
    identifier      reduce using rule 81 (relational_operator -> greater .)


state 82

    (82) relational_operator -> less_equal .

    float           reduce using rule 82 (relational_operator -> less_equal .)
    integer         reduce using rule 82 (relational_operator -> less_equal .)
    identifier      reduce using rule 82 (relational_operator -> less_equal .)


state 83

    (83) relational_operator -> greater_equal .

    float           reduce using rule 83 (relational_operator -> greater_equal .)
    integer         reduce using rule 83 (relational_operator -> greater_equal .)
    identifier      reduce using rule 83 (relational_operator -> greater_equal .)


state 84

    (72) boolean_expression -> boolean boolean_operator . boolean
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier

    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 118

    boolean                        shift and go to state 117

state 85

    (84) boolean_operator -> and .

    True            reduce using rule 84 (boolean_operator -> and .)
    False           reduce using rule 84 (boolean_operator -> and .)
    identifier      reduce using rule 84 (boolean_operator -> and .)


state 86

    (85) boolean_operator -> or .

    True            reduce using rule 85 (boolean_operator -> or .)
    False           reduce using rule 85 (boolean_operator -> or .)
    identifier      reduce using rule 85 (boolean_operator -> or .)


state 87

    (55) formatted_string -> text module . left_parenthesis element right_parenthesis

    left_parenthesis shift and go to state 119


state 88

    (87) string_concatenation -> text plus . text
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis

    string          shift and go to state 37
    identifier      shift and go to state 121

    text                           shift and go to state 120
    formatted_string               shift and go to state 38

state 89

    (59) arithmetic_expression -> arithmetic_expression arithmetic_operator . number
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier

    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 114

    number                         shift and go to state 122

state 90

    (69) boolean_expression -> arithmetic_expression relational_operator . number
    (71) boolean_expression -> arithmetic_expression relational_operator . arithmetic_expression
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 114

    arithmetic_expression          shift and go to state 123
    number                         shift and go to state 124

state 91

    (75) boolean_expression -> boolean_expression boolean_operator . boolean
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier

    True            shift and go to state 35
    False           shift and go to state 36
    identifier      shift and go to state 118

    boolean                        shift and go to state 125

state 92

    (76) boolean_expression -> boolean_expression relational_operator . number
    (77) boolean_expression -> boolean_expression relational_operator . arithmetic_expression
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number

    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 114

    number                         shift and go to state 126
    arithmetic_expression          shift and go to state 127

state 93

    (88) string_concatenation -> string_concatenation plus . text
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis

    string          shift and go to state 37
    identifier      shift and go to state 121

    text                           shift and go to state 128
    formatted_string               shift and go to state 38

state 94

    (92) list -> left_bracket element . right_bracket
    (94) element -> element . comma value

    right_bracket   shift and go to state 129
    comma           shift and go to state 130


state 95

    (93) element -> value .

    right_bracket   reduce using rule 93 (element -> value .)
    comma           reduce using rule 93 (element -> value .)
    right_parenthesis reduce using rule 93 (element -> value .)


state 96

    (73) boolean_expression -> not boolean .
    (72) boolean_expression -> boolean . boolean_operator boolean
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or

    and             reduce using rule 73 (boolean_expression -> not boolean .)
    or              reduce using rule 73 (boolean_expression -> not boolean .)
    equals          reduce using rule 73 (boolean_expression -> not boolean .)
    non_equal       reduce using rule 73 (boolean_expression -> not boolean .)
    less            reduce using rule 73 (boolean_expression -> not boolean .)
    greater         reduce using rule 73 (boolean_expression -> not boolean .)
    less_equal      reduce using rule 73 (boolean_expression -> not boolean .)
    greater_equal   reduce using rule 73 (boolean_expression -> not boolean .)
    newline         reduce using rule 73 (boolean_expression -> not boolean .)
    return          reduce using rule 73 (boolean_expression -> not boolean .)
    break           reduce using rule 73 (boolean_expression -> not boolean .)
    identifier      reduce using rule 73 (boolean_expression -> not boolean .)
    def             reduce using rule 73 (boolean_expression -> not boolean .)
    if              reduce using rule 73 (boolean_expression -> not boolean .)
    elif            reduce using rule 73 (boolean_expression -> not boolean .)
    else            reduce using rule 73 (boolean_expression -> not boolean .)
    for             reduce using rule 73 (boolean_expression -> not boolean .)
    while           reduce using rule 73 (boolean_expression -> not boolean .)
    $end            reduce using rule 73 (boolean_expression -> not boolean .)
    backspace       reduce using rule 73 (boolean_expression -> not boolean .)
    identation      reduce using rule 73 (boolean_expression -> not boolean .)
    colon           reduce using rule 73 (boolean_expression -> not boolean .)
    right_bracket   reduce using rule 73 (boolean_expression -> not boolean .)
    comma           reduce using rule 73 (boolean_expression -> not boolean .)
    right_parenthesis reduce using rule 73 (boolean_expression -> not boolean .)

  ! and             [ shift and go to state 85 ]
  ! or              [ shift and go to state 86 ]

    boolean_operator               shift and go to state 84

state 97

    (74) boolean_expression -> not boolean_expression .
    (75) boolean_expression -> boolean_expression . boolean_operator boolean
    (76) boolean_expression -> boolean_expression . relational_operator number
    (77) boolean_expression -> boolean_expression . relational_operator arithmetic_expression
    (84) boolean_operator -> . and
    (85) boolean_operator -> . or
    (78) relational_operator -> . equals
    (79) relational_operator -> . non_equal
    (80) relational_operator -> . less
    (81) relational_operator -> . greater
    (82) relational_operator -> . less_equal
    (83) relational_operator -> . greater_equal

    and             reduce using rule 74 (boolean_expression -> not boolean_expression .)
    or              reduce using rule 74 (boolean_expression -> not boolean_expression .)
    newline         reduce using rule 74 (boolean_expression -> not boolean_expression .)
    return          reduce using rule 74 (boolean_expression -> not boolean_expression .)
    break           reduce using rule 74 (boolean_expression -> not boolean_expression .)
    identifier      reduce using rule 74 (boolean_expression -> not boolean_expression .)
    def             reduce using rule 74 (boolean_expression -> not boolean_expression .)
    if              reduce using rule 74 (boolean_expression -> not boolean_expression .)
    elif            reduce using rule 74 (boolean_expression -> not boolean_expression .)
    else            reduce using rule 74 (boolean_expression -> not boolean_expression .)
    for             reduce using rule 74 (boolean_expression -> not boolean_expression .)
    while           reduce using rule 74 (boolean_expression -> not boolean_expression .)
    $end            reduce using rule 74 (boolean_expression -> not boolean_expression .)
    backspace       reduce using rule 74 (boolean_expression -> not boolean_expression .)
    identation      reduce using rule 74 (boolean_expression -> not boolean_expression .)
    colon           reduce using rule 74 (boolean_expression -> not boolean_expression .)
    right_bracket   reduce using rule 74 (boolean_expression -> not boolean_expression .)
    comma           reduce using rule 74 (boolean_expression -> not boolean_expression .)
    right_parenthesis reduce using rule 74 (boolean_expression -> not boolean_expression .)
    equals          shift and go to state 78
    non_equal       shift and go to state 79
    less            shift and go to state 80
    greater         shift and go to state 81
    less_equal      shift and go to state 82
    greater_equal   shift and go to state 83

  ! equals          [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! non_equal       [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! less            [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! greater         [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! less_equal      [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! greater_equal   [ reduce using rule 74 (boolean_expression -> not boolean_expression .) ]
  ! and             [ shift and go to state 85 ]
  ! or              [ shift and go to state 86 ]

    boolean_operator               shift and go to state 91
    relational_operator            shift and go to state 92

state 98

    (3) block_statement -> header newline inner_statement_list . backspace
    (4) block_statement -> header newline inner_statement_list .
    (23) inner_statement_list -> inner_statement_list . inner_statement newline
    (24) inner_statement_list -> inner_statement_list . inner_statement
    (25) inner_statement -> . identation statement
    (26) inner_statement -> . identation inner_statement

  ! shift/reduce conflict for backspace resolved as shift
  ! shift/reduce conflict for identation resolved as shift
    backspace       shift and go to state 131
    newline         reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    return          reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    break           reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    identifier      reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    def             reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    if              reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    elif            reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    else            reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    for             reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    while           reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    $end            reduce using rule 4 (block_statement -> header newline inner_statement_list .)
    identation      shift and go to state 100

  ! backspace       [ reduce using rule 4 (block_statement -> header newline inner_statement_list .) ]
  ! identation      [ reduce using rule 4 (block_statement -> header newline inner_statement_list .) ]

    inner_statement                shift and go to state 132

state 99

    (21) inner_statement_list -> inner_statement . newline
    (22) inner_statement_list -> inner_statement .

  ! shift/reduce conflict for newline resolved as shift
    newline         shift and go to state 133
    backspace       reduce using rule 22 (inner_statement_list -> inner_statement .)
    identation      reduce using rule 22 (inner_statement_list -> inner_statement .)
    return          reduce using rule 22 (inner_statement_list -> inner_statement .)
    break           reduce using rule 22 (inner_statement_list -> inner_statement .)
    identifier      reduce using rule 22 (inner_statement_list -> inner_statement .)
    def             reduce using rule 22 (inner_statement_list -> inner_statement .)
    if              reduce using rule 22 (inner_statement_list -> inner_statement .)
    elif            reduce using rule 22 (inner_statement_list -> inner_statement .)
    else            reduce using rule 22 (inner_statement_list -> inner_statement .)
    for             reduce using rule 22 (inner_statement_list -> inner_statement .)
    while           reduce using rule 22 (inner_statement_list -> inner_statement .)
    $end            reduce using rule 22 (inner_statement_list -> inner_statement .)

  ! newline         [ reduce using rule 22 (inner_statement_list -> inner_statement .) ]


state 100

    (25) inner_statement -> identation . statement
    (26) inner_statement -> identation . inner_statement
    (2) statement -> . block_statement
    (32) statement -> . assign_value
    (95) statement -> . function_call
    (100) statement -> . return value
    (101) statement -> . break
    (25) inner_statement -> . identation statement
    (26) inner_statement -> . identation inner_statement
    (3) block_statement -> . header newline inner_statement_list backspace
    (4) block_statement -> . header newline inner_statement_list
    (5) block_statement -> . empty
    (33) assign_value -> . identifier assign_operator value
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (6) header -> . defined_function
    (7) header -> . conditional_statement
    (8) header -> . repetitive_statement
    (102) empty -> .
    (9) defined_function -> . def identifier left_parenthesis parameter right_parenthesis colon
    (13) conditional_statement -> . if boolean_expression colon
    (14) conditional_statement -> . if boolean colon
    (15) conditional_statement -> . elif boolean_expression colon
    (16) conditional_statement -> . elif boolean colon
    (17) conditional_statement -> . else colon
    (18) repetitive_statement -> . for identifier in identifier colon
    (19) repetitive_statement -> . while boolean_expression colon
    (20) repetitive_statement -> . while boolean colon

  ! shift/reduce conflict for identation resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for break resolved as shift
  ! shift/reduce conflict for identifier resolved as shift
  ! shift/reduce conflict for def resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for elif resolved as shift
  ! shift/reduce conflict for else resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for while resolved as shift
    return          shift and go to state 8
    break           shift and go to state 9
    identation      shift and go to state 100
    identifier      shift and go to state 11
    newline         reduce using rule 102 (empty -> .)
    backspace       reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    def             shift and go to state 15
    if              shift and go to state 16
    elif            shift and go to state 17
    else            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

  ! identation      [ reduce using rule 102 (empty -> .) ]
  ! return          [ reduce using rule 102 (empty -> .) ]
  ! break           [ reduce using rule 102 (empty -> .) ]
  ! identifier      [ reduce using rule 102 (empty -> .) ]
  ! def             [ reduce using rule 102 (empty -> .) ]
  ! if              [ reduce using rule 102 (empty -> .) ]
  ! elif            [ reduce using rule 102 (empty -> .) ]
  ! else            [ reduce using rule 102 (empty -> .) ]
  ! for             [ reduce using rule 102 (empty -> .) ]
  ! while           [ reduce using rule 102 (empty -> .) ]

    statement                      shift and go to state 134
    inner_statement                shift and go to state 135
    block_statement                shift and go to state 5
    assign_value                   shift and go to state 6
    function_call                  shift and go to state 7
    header                         shift and go to state 10
    empty                          shift and go to state 22
    defined_function               shift and go to state 12
    conditional_statement          shift and go to state 13
    repetitive_statement           shift and go to state 14

state 101

    (33) assign_value -> identifier assign_operator value .

    newline         reduce using rule 33 (assign_value -> identifier assign_operator value .)
    return          reduce using rule 33 (assign_value -> identifier assign_operator value .)
    break           reduce using rule 33 (assign_value -> identifier assign_operator value .)
    identifier      reduce using rule 33 (assign_value -> identifier assign_operator value .)
    def             reduce using rule 33 (assign_value -> identifier assign_operator value .)
    if              reduce using rule 33 (assign_value -> identifier assign_operator value .)
    elif            reduce using rule 33 (assign_value -> identifier assign_operator value .)
    else            reduce using rule 33 (assign_value -> identifier assign_operator value .)
    for             reduce using rule 33 (assign_value -> identifier assign_operator value .)
    while           reduce using rule 33 (assign_value -> identifier assign_operator value .)
    $end            reduce using rule 33 (assign_value -> identifier assign_operator value .)
    backspace       reduce using rule 33 (assign_value -> identifier assign_operator value .)
    identation      reduce using rule 33 (assign_value -> identifier assign_operator value .)


state 102

    (96) function_call -> identifier left_parenthesis argument . right_parenthesis
    (98) argument -> argument . comma value

    right_parenthesis shift and go to state 136
    comma           shift and go to state 137


state 103

    (97) argument -> value .

    right_parenthesis reduce using rule 97 (argument -> value .)
    comma           reduce using rule 97 (argument -> value .)


state 104

    (99) argument -> empty .

    right_parenthesis reduce using rule 99 (argument -> empty .)
    comma           reduce using rule 99 (argument -> empty .)


state 105

    (9) defined_function -> def identifier left_parenthesis . parameter right_parenthesis colon
    (10) parameter -> . identifier
    (11) parameter -> . parameter comma identifier
    (12) parameter -> . empty
    (102) empty -> .

    identifier      shift and go to state 138
    right_parenthesis reduce using rule 102 (empty -> .)
    comma           reduce using rule 102 (empty -> .)

    parameter                      shift and go to state 139
    empty                          shift and go to state 140

state 106

    (13) conditional_statement -> if boolean_expression colon .

    newline         reduce using rule 13 (conditional_statement -> if boolean_expression colon .)


state 107

    (14) conditional_statement -> if boolean colon .

    newline         reduce using rule 14 (conditional_statement -> if boolean colon .)


state 108

    (15) conditional_statement -> elif boolean_expression colon .

    newline         reduce using rule 15 (conditional_statement -> elif boolean_expression colon .)


state 109

    (16) conditional_statement -> elif boolean colon .

    newline         reduce using rule 16 (conditional_statement -> elif boolean colon .)


state 110

    (18) repetitive_statement -> for identifier in . identifier colon

    identifier      shift and go to state 141


state 111

    (19) repetitive_statement -> while boolean_expression colon .

    newline         reduce using rule 19 (repetitive_statement -> while boolean_expression colon .)


state 112

    (20) repetitive_statement -> while boolean colon .

    newline         reduce using rule 20 (repetitive_statement -> while boolean colon .)


state 113

    (58) arithmetic_expression -> number arithmetic_operator number .

    plus            reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    minus           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    product         reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    division        reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    integer_division reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    module          reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    power           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    equals          reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    non_equal       reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    less            reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    greater         reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    less_equal      reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    greater_equal   reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    newline         reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    return          reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    break           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    identifier      reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    def             reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    if              reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    elif            reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    else            reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    for             reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    while           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    $end            reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    backspace       reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    identation      reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    right_bracket   reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    comma           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    right_parenthesis reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    and             reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    or              reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)
    colon           reduce using rule 58 (arithmetic_expression -> number arithmetic_operator number .)


state 114

    (46) number -> identifier .

    plus            reduce using rule 46 (number -> identifier .)
    minus           reduce using rule 46 (number -> identifier .)
    product         reduce using rule 46 (number -> identifier .)
    division        reduce using rule 46 (number -> identifier .)
    integer_division reduce using rule 46 (number -> identifier .)
    module          reduce using rule 46 (number -> identifier .)
    power           reduce using rule 46 (number -> identifier .)
    equals          reduce using rule 46 (number -> identifier .)
    non_equal       reduce using rule 46 (number -> identifier .)
    less            reduce using rule 46 (number -> identifier .)
    greater         reduce using rule 46 (number -> identifier .)
    less_equal      reduce using rule 46 (number -> identifier .)
    greater_equal   reduce using rule 46 (number -> identifier .)
    newline         reduce using rule 46 (number -> identifier .)
    return          reduce using rule 46 (number -> identifier .)
    break           reduce using rule 46 (number -> identifier .)
    identifier      reduce using rule 46 (number -> identifier .)
    def             reduce using rule 46 (number -> identifier .)
    if              reduce using rule 46 (number -> identifier .)
    elif            reduce using rule 46 (number -> identifier .)
    else            reduce using rule 46 (number -> identifier .)
    for             reduce using rule 46 (number -> identifier .)
    while           reduce using rule 46 (number -> identifier .)
    $end            reduce using rule 46 (number -> identifier .)
    backspace       reduce using rule 46 (number -> identifier .)
    identation      reduce using rule 46 (number -> identifier .)
    right_bracket   reduce using rule 46 (number -> identifier .)
    comma           reduce using rule 46 (number -> identifier .)
    right_parenthesis reduce using rule 46 (number -> identifier .)
    and             reduce using rule 46 (number -> identifier .)
    or              reduce using rule 46 (number -> identifier .)
    colon           reduce using rule 46 (number -> identifier .)


state 115

    (68) boolean_expression -> number relational_operator number .
    (58) arithmetic_expression -> number . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 68 (boolean_expression -> number relational_operator number .)
    or              reduce using rule 68 (boolean_expression -> number relational_operator number .)
    equals          reduce using rule 68 (boolean_expression -> number relational_operator number .)
    non_equal       reduce using rule 68 (boolean_expression -> number relational_operator number .)
    less            reduce using rule 68 (boolean_expression -> number relational_operator number .)
    greater         reduce using rule 68 (boolean_expression -> number relational_operator number .)
    less_equal      reduce using rule 68 (boolean_expression -> number relational_operator number .)
    greater_equal   reduce using rule 68 (boolean_expression -> number relational_operator number .)
    newline         reduce using rule 68 (boolean_expression -> number relational_operator number .)
    return          reduce using rule 68 (boolean_expression -> number relational_operator number .)
    break           reduce using rule 68 (boolean_expression -> number relational_operator number .)
    identifier      reduce using rule 68 (boolean_expression -> number relational_operator number .)
    def             reduce using rule 68 (boolean_expression -> number relational_operator number .)
    if              reduce using rule 68 (boolean_expression -> number relational_operator number .)
    elif            reduce using rule 68 (boolean_expression -> number relational_operator number .)
    else            reduce using rule 68 (boolean_expression -> number relational_operator number .)
    for             reduce using rule 68 (boolean_expression -> number relational_operator number .)
    while           reduce using rule 68 (boolean_expression -> number relational_operator number .)
    $end            reduce using rule 68 (boolean_expression -> number relational_operator number .)
    backspace       reduce using rule 68 (boolean_expression -> number relational_operator number .)
    identation      reduce using rule 68 (boolean_expression -> number relational_operator number .)
    colon           reduce using rule 68 (boolean_expression -> number relational_operator number .)
    right_bracket   reduce using rule 68 (boolean_expression -> number relational_operator number .)
    comma           reduce using rule 68 (boolean_expression -> number relational_operator number .)
    right_parenthesis reduce using rule 68 (boolean_expression -> number relational_operator number .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 69

state 116

    (70) boolean_expression -> number relational_operator arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    or              reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    equals          reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    non_equal       reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    less            reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    greater         reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    less_equal      reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    greater_equal   reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    newline         reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    return          reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    break           reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    identifier      reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    def             reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    if              reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    elif            reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    else            reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    for             reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    while           reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    $end            reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    backspace       reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    identation      reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    colon           reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    right_bracket   reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    comma           reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    right_parenthesis reduce using rule 70 (boolean_expression -> number relational_operator arithmetic_expression .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 89

state 117

    (72) boolean_expression -> boolean boolean_operator boolean .

    and             reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    or              reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    equals          reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    non_equal       reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    less            reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    greater         reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    less_equal      reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    greater_equal   reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    newline         reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    return          reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    break           reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    identifier      reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    def             reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    if              reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    elif            reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    else            reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    for             reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    while           reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    $end            reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    backspace       reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    identation      reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    colon           reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    right_bracket   reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    comma           reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)
    right_parenthesis reduce using rule 72 (boolean_expression -> boolean boolean_operator boolean .)


state 118

    (50) boolean -> identifier .

    and             reduce using rule 50 (boolean -> identifier .)
    or              reduce using rule 50 (boolean -> identifier .)
    equals          reduce using rule 50 (boolean -> identifier .)
    non_equal       reduce using rule 50 (boolean -> identifier .)
    less            reduce using rule 50 (boolean -> identifier .)
    greater         reduce using rule 50 (boolean -> identifier .)
    less_equal      reduce using rule 50 (boolean -> identifier .)
    greater_equal   reduce using rule 50 (boolean -> identifier .)
    newline         reduce using rule 50 (boolean -> identifier .)
    return          reduce using rule 50 (boolean -> identifier .)
    break           reduce using rule 50 (boolean -> identifier .)
    identifier      reduce using rule 50 (boolean -> identifier .)
    def             reduce using rule 50 (boolean -> identifier .)
    if              reduce using rule 50 (boolean -> identifier .)
    elif            reduce using rule 50 (boolean -> identifier .)
    else            reduce using rule 50 (boolean -> identifier .)
    for             reduce using rule 50 (boolean -> identifier .)
    while           reduce using rule 50 (boolean -> identifier .)
    $end            reduce using rule 50 (boolean -> identifier .)
    backspace       reduce using rule 50 (boolean -> identifier .)
    identation      reduce using rule 50 (boolean -> identifier .)
    colon           reduce using rule 50 (boolean -> identifier .)
    right_bracket   reduce using rule 50 (boolean -> identifier .)
    comma           reduce using rule 50 (boolean -> identifier .)
    right_parenthesis reduce using rule 50 (boolean -> identifier .)


state 119

    (55) formatted_string -> text module left_parenthesis . element right_parenthesis
    (93) element -> . value
    (94) element -> . element comma value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    text                           shift and go to state 27
    element                        shift and go to state 142
    value                          shift and go to state 95
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 120

    (87) string_concatenation -> text plus text .
    (55) formatted_string -> text . module left_parenthesis element right_parenthesis

    plus            reduce using rule 87 (string_concatenation -> text plus text .)
    newline         reduce using rule 87 (string_concatenation -> text plus text .)
    return          reduce using rule 87 (string_concatenation -> text plus text .)
    break           reduce using rule 87 (string_concatenation -> text plus text .)
    identifier      reduce using rule 87 (string_concatenation -> text plus text .)
    def             reduce using rule 87 (string_concatenation -> text plus text .)
    if              reduce using rule 87 (string_concatenation -> text plus text .)
    elif            reduce using rule 87 (string_concatenation -> text plus text .)
    else            reduce using rule 87 (string_concatenation -> text plus text .)
    for             reduce using rule 87 (string_concatenation -> text plus text .)
    while           reduce using rule 87 (string_concatenation -> text plus text .)
    $end            reduce using rule 87 (string_concatenation -> text plus text .)
    backspace       reduce using rule 87 (string_concatenation -> text plus text .)
    identation      reduce using rule 87 (string_concatenation -> text plus text .)
    right_bracket   reduce using rule 87 (string_concatenation -> text plus text .)
    comma           reduce using rule 87 (string_concatenation -> text plus text .)
    right_parenthesis reduce using rule 87 (string_concatenation -> text plus text .)
    module          shift and go to state 87


state 121

    (54) text -> identifier .

    module          reduce using rule 54 (text -> identifier .)
    plus            reduce using rule 54 (text -> identifier .)
    newline         reduce using rule 54 (text -> identifier .)
    return          reduce using rule 54 (text -> identifier .)
    break           reduce using rule 54 (text -> identifier .)
    identifier      reduce using rule 54 (text -> identifier .)
    def             reduce using rule 54 (text -> identifier .)
    if              reduce using rule 54 (text -> identifier .)
    elif            reduce using rule 54 (text -> identifier .)
    else            reduce using rule 54 (text -> identifier .)
    for             reduce using rule 54 (text -> identifier .)
    while           reduce using rule 54 (text -> identifier .)
    $end            reduce using rule 54 (text -> identifier .)
    backspace       reduce using rule 54 (text -> identifier .)
    identation      reduce using rule 54 (text -> identifier .)
    right_bracket   reduce using rule 54 (text -> identifier .)
    comma           reduce using rule 54 (text -> identifier .)
    right_parenthesis reduce using rule 54 (text -> identifier .)


state 122

    (59) arithmetic_expression -> arithmetic_expression arithmetic_operator number .

    plus            reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    minus           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    product         reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    division        reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    integer_division reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    module          reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    power           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    equals          reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    non_equal       reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    less            reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    greater         reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    less_equal      reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    greater_equal   reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    newline         reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    return          reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    break           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    identifier      reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    def             reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    if              reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    elif            reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    else            reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    for             reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    while           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    $end            reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    backspace       reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    identation      reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    right_bracket   reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    comma           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    right_parenthesis reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    and             reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    or              reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)
    colon           reduce using rule 59 (arithmetic_expression -> arithmetic_expression arithmetic_operator number .)


state 123

    (71) boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    or              reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    equals          reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    non_equal       reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    less            reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    greater         reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    less_equal      reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    greater_equal   reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    newline         reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    return          reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    break           reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    identifier      reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    def             reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    if              reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    elif            reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    else            reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    for             reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    while           reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    $end            reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    backspace       reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    identation      reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    colon           reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    right_bracket   reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    comma           reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    right_parenthesis reduce using rule 71 (boolean_expression -> arithmetic_expression relational_operator arithmetic_expression .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 89

state 124

    (69) boolean_expression -> arithmetic_expression relational_operator number .
    (58) arithmetic_expression -> number . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    or              reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    equals          reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    non_equal       reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    less            reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    greater         reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    less_equal      reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    greater_equal   reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    newline         reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    return          reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    break           reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    identifier      reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    def             reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    if              reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    elif            reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    else            reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    for             reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    while           reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    $end            reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    backspace       reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    identation      reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    colon           reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    right_bracket   reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    comma           reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    right_parenthesis reduce using rule 69 (boolean_expression -> arithmetic_expression relational_operator number .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 69

state 125

    (75) boolean_expression -> boolean_expression boolean_operator boolean .

    and             reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    or              reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    equals          reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    non_equal       reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    less            reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    greater         reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    less_equal      reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    greater_equal   reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    newline         reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    return          reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    break           reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    identifier      reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    def             reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    if              reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    elif            reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    else            reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    for             reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    while           reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    $end            reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    backspace       reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    identation      reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    colon           reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    right_bracket   reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    comma           reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)
    right_parenthesis reduce using rule 75 (boolean_expression -> boolean_expression boolean_operator boolean .)


state 126

    (76) boolean_expression -> boolean_expression relational_operator number .
    (58) arithmetic_expression -> number . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    or              reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    equals          reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    non_equal       reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    less            reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    greater         reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    less_equal      reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    greater_equal   reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    newline         reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    return          reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    break           reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    identifier      reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    def             reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    if              reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    elif            reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    else            reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    for             reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    while           reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    $end            reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    backspace       reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    identation      reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    colon           reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    right_bracket   reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    comma           reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    right_parenthesis reduce using rule 76 (boolean_expression -> boolean_expression relational_operator number .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 69

state 127

    (77) boolean_expression -> boolean_expression relational_operator arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . arithmetic_operator number
    (60) arithmetic_operator -> . plus
    (61) arithmetic_operator -> . minus
    (62) arithmetic_operator -> . product
    (63) arithmetic_operator -> . division
    (64) arithmetic_operator -> . integer_division
    (65) arithmetic_operator -> . module
    (66) arithmetic_operator -> . power

    and             reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    or              reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    equals          reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    non_equal       reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    less            reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    greater         reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    less_equal      reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    greater_equal   reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    newline         reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    return          reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    break           reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    identifier      reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    def             reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    if              reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    elif            reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    else            reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    for             reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    while           reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    $end            reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    backspace       reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    identation      reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    colon           reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    right_bracket   reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    comma           reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    right_parenthesis reduce using rule 77 (boolean_expression -> boolean_expression relational_operator arithmetic_expression .)
    plus            shift and go to state 71
    minus           shift and go to state 72
    product         shift and go to state 73
    division        shift and go to state 74
    integer_division shift and go to state 75
    module          shift and go to state 76
    power           shift and go to state 77

    arithmetic_operator            shift and go to state 89

state 128

    (88) string_concatenation -> string_concatenation plus text .
    (55) formatted_string -> text . module left_parenthesis element right_parenthesis

    plus            reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    newline         reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    return          reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    break           reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    identifier      reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    def             reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    if              reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    elif            reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    else            reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    for             reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    while           reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    $end            reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    backspace       reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    identation      reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    right_bracket   reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    comma           reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    right_parenthesis reduce using rule 88 (string_concatenation -> string_concatenation plus text .)
    module          shift and go to state 87


state 129

    (92) list -> left_bracket element right_bracket .

    newline         reduce using rule 92 (list -> left_bracket element right_bracket .)
    return          reduce using rule 92 (list -> left_bracket element right_bracket .)
    break           reduce using rule 92 (list -> left_bracket element right_bracket .)
    identifier      reduce using rule 92 (list -> left_bracket element right_bracket .)
    def             reduce using rule 92 (list -> left_bracket element right_bracket .)
    if              reduce using rule 92 (list -> left_bracket element right_bracket .)
    elif            reduce using rule 92 (list -> left_bracket element right_bracket .)
    else            reduce using rule 92 (list -> left_bracket element right_bracket .)
    for             reduce using rule 92 (list -> left_bracket element right_bracket .)
    while           reduce using rule 92 (list -> left_bracket element right_bracket .)
    $end            reduce using rule 92 (list -> left_bracket element right_bracket .)
    backspace       reduce using rule 92 (list -> left_bracket element right_bracket .)
    identation      reduce using rule 92 (list -> left_bracket element right_bracket .)
    right_bracket   reduce using rule 92 (list -> left_bracket element right_bracket .)
    comma           reduce using rule 92 (list -> left_bracket element right_bracket .)
    right_parenthesis reduce using rule 92 (list -> left_bracket element right_bracket .)


state 130

    (94) element -> element comma . value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    value                          shift and go to state 143
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 131

    (3) block_statement -> header newline inner_statement_list backspace .

    newline         reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    return          reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    break           reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    identifier      reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    def             reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    if              reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    elif            reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    else            reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    for             reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    while           reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    $end            reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    backspace       reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)
    identation      reduce using rule 3 (block_statement -> header newline inner_statement_list backspace .)


state 132

    (23) inner_statement_list -> inner_statement_list inner_statement . newline
    (24) inner_statement_list -> inner_statement_list inner_statement .

  ! shift/reduce conflict for newline resolved as shift
    newline         shift and go to state 144
    backspace       reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    identation      reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    return          reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    break           reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    identifier      reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    def             reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    if              reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    elif            reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    else            reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    for             reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    while           reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)
    $end            reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .)

  ! newline         [ reduce using rule 24 (inner_statement_list -> inner_statement_list inner_statement .) ]


state 133

    (21) inner_statement_list -> inner_statement newline .

    newline         reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    backspace       reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    identation      reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    return          reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    break           reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    identifier      reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    def             reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    if              reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    elif            reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    else            reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    for             reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    while           reduce using rule 21 (inner_statement_list -> inner_statement newline .)
    $end            reduce using rule 21 (inner_statement_list -> inner_statement newline .)


state 134

    (25) inner_statement -> identation statement .

    newline         reduce using rule 25 (inner_statement -> identation statement .)
    backspace       reduce using rule 25 (inner_statement -> identation statement .)
    identation      reduce using rule 25 (inner_statement -> identation statement .)
    return          reduce using rule 25 (inner_statement -> identation statement .)
    break           reduce using rule 25 (inner_statement -> identation statement .)
    identifier      reduce using rule 25 (inner_statement -> identation statement .)
    def             reduce using rule 25 (inner_statement -> identation statement .)
    if              reduce using rule 25 (inner_statement -> identation statement .)
    elif            reduce using rule 25 (inner_statement -> identation statement .)
    else            reduce using rule 25 (inner_statement -> identation statement .)
    for             reduce using rule 25 (inner_statement -> identation statement .)
    while           reduce using rule 25 (inner_statement -> identation statement .)
    $end            reduce using rule 25 (inner_statement -> identation statement .)


state 135

    (26) inner_statement -> identation inner_statement .

    newline         reduce using rule 26 (inner_statement -> identation inner_statement .)
    backspace       reduce using rule 26 (inner_statement -> identation inner_statement .)
    identation      reduce using rule 26 (inner_statement -> identation inner_statement .)
    return          reduce using rule 26 (inner_statement -> identation inner_statement .)
    break           reduce using rule 26 (inner_statement -> identation inner_statement .)
    identifier      reduce using rule 26 (inner_statement -> identation inner_statement .)
    def             reduce using rule 26 (inner_statement -> identation inner_statement .)
    if              reduce using rule 26 (inner_statement -> identation inner_statement .)
    elif            reduce using rule 26 (inner_statement -> identation inner_statement .)
    else            reduce using rule 26 (inner_statement -> identation inner_statement .)
    for             reduce using rule 26 (inner_statement -> identation inner_statement .)
    while           reduce using rule 26 (inner_statement -> identation inner_statement .)
    $end            reduce using rule 26 (inner_statement -> identation inner_statement .)


state 136

    (96) function_call -> identifier left_parenthesis argument right_parenthesis .

    newline         reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    return          reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    break           reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    identifier      reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    def             reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    if              reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    elif            reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    else            reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    for             reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    while           reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    $end            reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    backspace       reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    identation      reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    right_bracket   reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    comma           reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)
    right_parenthesis reduce using rule 96 (function_call -> identifier left_parenthesis argument right_parenthesis .)


state 137

    (98) argument -> argument comma . value
    (43) value -> . number
    (47) value -> . boolean
    (51) value -> . text
    (56) value -> . expression
    (89) value -> . list
    (90) value -> . function_call
    (91) value -> . None
    (44) number -> . float
    (45) number -> . integer
    (46) number -> . identifier
    (48) boolean -> . True
    (49) boolean -> . False
    (50) boolean -> . identifier
    (52) text -> . string
    (53) text -> . formatted_string
    (54) text -> . identifier
    (57) expression -> . arithmetic_expression
    (67) expression -> . boolean_expression
    (86) expression -> . string_concatenation
    (92) list -> . left_bracket element right_bracket
    (96) function_call -> . identifier left_parenthesis argument right_parenthesis
    (55) formatted_string -> . text module left_parenthesis element right_parenthesis
    (58) arithmetic_expression -> . number arithmetic_operator number
    (59) arithmetic_expression -> . arithmetic_expression arithmetic_operator number
    (68) boolean_expression -> . number relational_operator number
    (69) boolean_expression -> . arithmetic_expression relational_operator number
    (70) boolean_expression -> . number relational_operator arithmetic_expression
    (71) boolean_expression -> . arithmetic_expression relational_operator arithmetic_expression
    (72) boolean_expression -> . boolean boolean_operator boolean
    (73) boolean_expression -> . not boolean
    (74) boolean_expression -> . not boolean_expression
    (75) boolean_expression -> . boolean_expression boolean_operator boolean
    (76) boolean_expression -> . boolean_expression relational_operator number
    (77) boolean_expression -> . boolean_expression relational_operator arithmetic_expression
    (87) string_concatenation -> . text plus text
    (88) string_concatenation -> . string_concatenation plus text

    None            shift and go to state 31
    float           shift and go to state 32
    integer         shift and go to state 33
    identifier      shift and go to state 34
    True            shift and go to state 35
    False           shift and go to state 36
    string          shift and go to state 37
    left_bracket    shift and go to state 42
    not             shift and go to state 43

    value                          shift and go to state 145
    number                         shift and go to state 25
    boolean                        shift and go to state 26
    text                           shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 29
    function_call                  shift and go to state 30
    formatted_string               shift and go to state 38
    arithmetic_expression          shift and go to state 39
    boolean_expression             shift and go to state 40
    string_concatenation           shift and go to state 41

state 138

    (10) parameter -> identifier .

    right_parenthesis reduce using rule 10 (parameter -> identifier .)
    comma           reduce using rule 10 (parameter -> identifier .)


state 139

    (9) defined_function -> def identifier left_parenthesis parameter . right_parenthesis colon
    (11) parameter -> parameter . comma identifier

    right_parenthesis shift and go to state 146
    comma           shift and go to state 147


state 140

    (12) parameter -> empty .

    right_parenthesis reduce using rule 12 (parameter -> empty .)
    comma           reduce using rule 12 (parameter -> empty .)


state 141

    (18) repetitive_statement -> for identifier in identifier . colon

    colon           shift and go to state 148


state 142

    (55) formatted_string -> text module left_parenthesis element . right_parenthesis
    (94) element -> element . comma value

    right_parenthesis shift and go to state 149
    comma           shift and go to state 130


state 143

    (94) element -> element comma value .

    right_bracket   reduce using rule 94 (element -> element comma value .)
    comma           reduce using rule 94 (element -> element comma value .)
    right_parenthesis reduce using rule 94 (element -> element comma value .)


state 144

    (23) inner_statement_list -> inner_statement_list inner_statement newline .

    newline         reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    backspace       reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    identation      reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    return          reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    break           reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    identifier      reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    def             reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    if              reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    elif            reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    else            reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    for             reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    while           reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)
    $end            reduce using rule 23 (inner_statement_list -> inner_statement_list inner_statement newline .)


state 145

    (98) argument -> argument comma value .

    right_parenthesis reduce using rule 98 (argument -> argument comma value .)
    comma           reduce using rule 98 (argument -> argument comma value .)


state 146

    (9) defined_function -> def identifier left_parenthesis parameter right_parenthesis . colon

    colon           shift and go to state 150


state 147

    (11) parameter -> parameter comma . identifier

    identifier      shift and go to state 151


state 148

    (18) repetitive_statement -> for identifier in identifier colon .

    newline         reduce using rule 18 (repetitive_statement -> for identifier in identifier colon .)


state 149

    (55) formatted_string -> text module left_parenthesis element right_parenthesis .

    module          reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    plus            reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    newline         reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    return          reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    break           reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    identifier      reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    def             reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    if              reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    elif            reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    else            reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    for             reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    while           reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    $end            reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    backspace       reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    identation      reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    right_bracket   reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    comma           reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)
    right_parenthesis reduce using rule 55 (formatted_string -> text module left_parenthesis element right_parenthesis .)


state 150

    (9) defined_function -> def identifier left_parenthesis parameter right_parenthesis colon .

    newline         reduce using rule 9 (defined_function -> def identifier left_parenthesis parameter right_parenthesis colon .)


state 151

    (11) parameter -> parameter comma identifier .

    right_parenthesis reduce using rule 11 (parameter -> parameter comma identifier .)
    comma           reduce using rule 11 (parameter -> parameter comma identifier .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for return in state 0 resolved as shift
WARNING: shift/reduce conflict for break in state 0 resolved as shift
WARNING: shift/reduce conflict for identifier in state 0 resolved as shift
WARNING: shift/reduce conflict for def in state 0 resolved as shift
WARNING: shift/reduce conflict for if in state 0 resolved as shift
WARNING: shift/reduce conflict for elif in state 0 resolved as shift
WARNING: shift/reduce conflict for else in state 0 resolved as shift
WARNING: shift/reduce conflict for for in state 0 resolved as shift
WARNING: shift/reduce conflict for while in state 0 resolved as shift
WARNING: shift/reduce conflict for return in state 2 resolved as shift
WARNING: shift/reduce conflict for break in state 2 resolved as shift
WARNING: shift/reduce conflict for identifier in state 2 resolved as shift
WARNING: shift/reduce conflict for def in state 2 resolved as shift
WARNING: shift/reduce conflict for if in state 2 resolved as shift
WARNING: shift/reduce conflict for elif in state 2 resolved as shift
WARNING: shift/reduce conflict for else in state 2 resolved as shift
WARNING: shift/reduce conflict for for in state 2 resolved as shift
WARNING: shift/reduce conflict for while in state 2 resolved as shift
WARNING: shift/reduce conflict for newline in state 3 resolved as shift
WARNING: shift/reduce conflict for newline in state 21 resolved as shift
WARNING: shift/reduce conflict for backspace in state 98 resolved as shift
WARNING: shift/reduce conflict for identation in state 98 resolved as shift
WARNING: shift/reduce conflict for newline in state 99 resolved as shift
WARNING: shift/reduce conflict for identation in state 100 resolved as shift
WARNING: shift/reduce conflict for return in state 100 resolved as shift
WARNING: shift/reduce conflict for break in state 100 resolved as shift
WARNING: shift/reduce conflict for identifier in state 100 resolved as shift
WARNING: shift/reduce conflict for def in state 100 resolved as shift
WARNING: shift/reduce conflict for if in state 100 resolved as shift
WARNING: shift/reduce conflict for elif in state 100 resolved as shift
WARNING: shift/reduce conflict for else in state 100 resolved as shift
WARNING: shift/reduce conflict for for in state 100 resolved as shift
WARNING: shift/reduce conflict for while in state 100 resolved as shift
WARNING: shift/reduce conflict for newline in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> statement_list)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 4 resolved using rule (block_statement -> empty)
WARNING: rejected rule (statement_list -> empty) in state 4
WARNING: reduce/reduce conflict in state 34 resolved using rule (number -> identifier)
WARNING: rejected rule (boolean -> identifier) in state 34
WARNING: reduce/reduce conflict in state 34 resolved using rule (number -> identifier)
WARNING: rejected rule (text -> identifier) in state 34
WARNING: reduce/reduce conflict in state 61 resolved using rule (number -> identifier)
WARNING: rejected rule (boolean -> identifier) in state 61
WARNING: Rule (statement_list -> empty) is never reduced
